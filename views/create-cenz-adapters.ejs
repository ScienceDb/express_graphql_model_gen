const axios_general = require('axios');
const globals = require('../config/globals');
const {
    handleError
} = require('../utils/errors');

let axios = axios_general.create();
axios.defaults.timeout = globals.MAX_TIME_OUT;

const remoteCenzontleURL = "<%- url -%>";
const iriRegex = new RegExp('<%- regex -%>');

module.exports = class <%- adapterName -%>{

  static get name(){
    return "<%- adapterName -%>";
  }

  static get type(){
    return "<%- adapterType -%>";
  }

  static recognizeId(iri){
    return iriRegex.test(iri);
  }

  static readById(iri){
    let query = `query readOne<%- nameCp -%>{readOne<%- nameCp -%>(<%- idAttribute -%>: "${iri}"){ <%- idAttribute -%> <%for(var key in attributes){-%>
       <%=key %>
     <%}-%> }}  `;

     return axios.post(remoteCenzontleURL,{query: query}).then(res =>{
       let data = res.data.data.readOne<%- nameCp -%>;
       return data;
     }).catch(error =>{
       error['url'] = remoteCenzontleURL;
       handleError(error);
     });
  }

  static countRecords(search){
    let query = `query count<%- namePlCp -%>($search: search<%- nameCp -%>Input){
  count<%- namePlCp -%>(search: $search)
  }`

    return axios.post(remoteCenzontleURL, {
        query: query,
        variables: {
            search: search
        }
    }).then(res => {
        return res.data.data.count<%- namePlCp -%>;
    }).catch(error => {
        error['url'] = remoteCenzontleURL;
        handleError(error);
    });
  }

  static readAllCursor(search, order, pagination){
    //check valid pagination arguments
    let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
    if (!argsValid) {
      throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
    }
    let query = `query <%- namePl -%>Connection($search: search<%- nameCp -%>Input $pagination: paginationCursorInput $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>Connection(search:$search pagination:$pagination order:$order){ edges{cursor node{  <%- idAttribute -%> <%for(var key in attributes){-%> <%=key %>
        <%}-%>} } pageInfo{ startCursor endCursor hasPreviousPage hasNextPage } } }`

    return axios.post(remoteCenzontleURL, {query:query, variables: {search: search, order:order, pagination: pagination}}).then(res =>{
      return res.data.data.<%- namePl -%>Connection;
    }).catch(error=>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }

  static addOne(input){
    let query = `mutation add<%- nameCp -%>(<%if(!defaultId){-%> 
          $<%=idAttribute%>:ID <%}-%> 
<%for(var key in attributes){-%>
          $<%=key %>:<%= attributes[key]%>
<%}-%>
        ){
          add<%- nameCp -%>(<%if(!defaultId){-%> 
            <%=idAttribute %>:$<%= idAttribute%> <%}-%> 
<%for(var key in attributes){-%>
            <%=key %>:$<%= key%>
<%}-%>
          ){
            <%- idAttribute -%> 
<%for(var key in attributes){-%>
            <%=key %>
<%}-%>     
          }
        }`;

     return axios.post(remoteCenzontleURL, {query:query, variables:input}).then(res =>{
       let data = res.data.data.add<%- nameCp -%>;
       return new <%- name -%>(data);
     }).catch(error =>{
       error['url'] = remoteCenzontleURL;
       handleError(error);
     });
  }

  static deleteOne(id){
    let query = `mutation delete<%- nameCp -%>{ delete<%- nameCp -%>(<%- idAttribute -%>: ${id}) }`;

    return axios.post(remoteCenzontleURL, {query: query}).then(res =>{
      return res.data.data.delete<%- nameCp -%>;
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }

  static updateOne(input){
    let query = `mutation update<%- nameCp-%>(
          $<%- idAttribute -%>:ID!
<%for(var key in attributes){-%>
          $<%=key %>:<%= attributes[key] %>
<%}-%>        ){
            update<%- nameCp-%>(
              <%- idAttribute -%>:$<%- idAttribute %>
<%for(var key in attributes){-%>
              <%=key %>:$<%= key %>
<%}-%>
            ){
              <%- idAttribute %>
<%for(var key in attributes){-%>
              <%=key %>
<%}-%>
            }
        }`

    return axios.post(remoteCenzontleURL, {query:query, variables:input}).then(res => {
      let data = res.data.data.update<%- nameCp-%>;
      return new <%- name -%>(data);
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }

  static bulkAddCsv(context) {
    throw Error("<%- name -%>.bulkAddCsv is not implemented.")
  }

  static  csvTableTemplate(){
    let query = `query { csvTableTemplate<%- nameCp-%> }`;
    return axios.post(remoteCenzontleURL, {query:query}).then(res =>{
      return res.data.data.csvTableTemplate<%- nameCp-%>;
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }
}
