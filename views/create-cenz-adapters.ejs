const axios_general = require('axios');
const globals = require('../config/globals');
const {
    handleError
} = require('../utils/errors');
const validatorUtil = require('../utils/validatorUtil');

let axios = axios_general.create();
axios.defaults.timeout = globals.MAX_TIME_OUT;

const remoteCenzontleURL = "<%- url -%>";
const iriRegex = new RegExp('<%- regex -%>');

module.exports = class <%- adapterName -%>{

  static get adapterName(){
    return '<%- adapterName -%>';
  }

  static get adapterType(){
    return '<%- storageType -%>';
  }

  static recognizeId(iri){
    return iriRegex.test(iri);
  }

  static readById(iri){
    let query = `
          query
            readOne<%- nameCp %>
            {
              readOne<%- nameCp -%>(<%- idAttribute -%>:"${iri}")
              {
                <%- idAttribute -%> <%for(var key in attributes){ %>
                <%= key %> <%}%>
              }
            }`;

    return axios.post( remoteCenzontleURL, {
      query: query
    }).then(res =>{
      //check
      if(res&&res.data&&res.data.data) {
          return res.data.data.readOne<%- nameCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
      }
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }

  static countRecords(search){
    let query = `
      query count<%- namePlCp -%>($search: search<%- nameCp -%>Input){
        count<%- namePlCp -%>(search: $search)
      }`

    return axios.post(remoteCenzontleURL, {
        query: query,
        variables: {
            search: search
        }
    }).then(res => {
      //check
      if(res&&res.data&&res.data.data) {
        return res.data.data.count<%- namePlCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
      }
    }).catch(error => {
        error['url'] = remoteCenzontleURL;
        handleError(error);
    });
  }

  static readAllCursor(search, order, pagination){
    //check valid pagination arguments
    let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
    if (!argsValid) {
      throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
    }
    let query = `query <%- namePl -%>Connection($search: search<%- nameCp -%>Input $pagination: paginationCursorInput $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>Connection(search:$search pagination:$pagination order:$order){ edges{cursor node{  <%- idAttribute -%> <%for(var key in attributes){-%> <%=key %>
        <%}-%>} } pageInfo{ startCursor endCursor hasPreviousPage hasNextPage } } }`

      return axios.post(remoteCenzontleURL, {
        query:query,
        variables: {
          search: search,
          order:order,
          pagination: pagination
        }
      }).then(res =>{
        //check
        if(res&&res.data&&res.data.data) {
          return res.data.data.<%- namePl -%>Connection;
        } else {
          throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
        }
    }).catch(error=>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }

  static addOne(input){
      let query = `
          mutation add<%- nameCp _%>(
  <%if(!defaultId){-%>
            $<%=idAttribute%>:ID! <%}-%> <%for(var key in editableAttributes){%>
            $<%=key %>:<%= editableAttributes[key]%><%}-%>
          ){
            add<%- nameCp -%>(<%if(!defaultId){-%>
            <%=idAttribute %>:$<%= idAttribute%> <%}-%> <%for(var key in editableAttributes){%>
            <%=key %>:$<%= key%><%}-%>){
              <%- idAttribute -%>
  <%for(var key in attributes){-%>
              <%=key %>
  <%}-%>
            }
          }`;

      return axios.post(remoteCenzontleURL, {query:query, variables:input}).then(res =>{
        //check
        if(res&&res.data&&res.data.data) {
          return res.data.data.add<%- nameCp -%>;
        } else {
          throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
        }
      }).catch(error =>{
        error['url'] = remoteCenzontleURL;
        handleError(error);
      });
  }

  static deleteOne(id){
    let query = `
          mutation
            delete<%- nameCp -%>{
              delete<%- nameCp -%>(
                <%- idAttribute -%>: "${id}" )}`;

    return axios.post(remoteCenzontleURL, {query: query}).then(res =>{
      //check
      if(res&&res.data&&res.data.data) {
        return res.data.data.delete<%- nameCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
      }
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }

  static updateOne(input){
    let query = `
          mutation
            update<%- nameCp-%>(
              $<%- idAttribute -%>:ID! <%for(var key in editableAttributes){%>
              $<%=key %>:<%= editableAttributes[key]%> <%}-%>
            ){
              update<%- nameCp-%>(
                <%- idAttribute -%>:$<%- idAttribute -%> <%for(var key in editableAttributes){%>
                <%=key %>:$<%= key%> <%}-%>
              ){
                <%- idAttribute -%> <%for(var key in attributes){%>
                <%=key %> <%}%>
              }
            }`

    return axios.post(remoteCenzontleURL, {query:query, variables:input}).then(res => {
      //check
      if(res&&res.data&&res.data.data) {
        return res.data.data.update<%- nameCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
      }
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }


  <%#
  /**
   * Add and remove methods for to-one association where the foreign key
   * is stored in this model and therefore this adapter is the responsible to update the foreign key.
   */
  -%>
  <%- include('./includes/create-adapter-fields-mutations', {op: "add"}); %>
  <%- include('./includes/create-adapter-fields-mutations', {op: "remove"}); %>


  static bulkAddCsv(context) {
    throw new Error("<%- name -%>.bulkAddCsv is not implemented.")
  }

  static  csvTableTemplate(){
    let query = `query { csvTableTemplate<%- nameCp-%> }`;
    return axios.post(remoteCenzontleURL, {query:query}).then(res =>{
      //check
      if(res&&res.data&&res.data.data) {
        return res.data.data.csvTableTemplate<%- nameCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
      }
    }).catch(error =>{
      error['url'] = remoteCenzontleURL;
      handleError(error);
    });
  }
}
