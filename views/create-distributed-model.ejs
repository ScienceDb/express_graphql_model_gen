

const adapters = require('../adapters/index');



let registry = [ <%- registry.map( x => '"'+x+'"') -%> ];

module.exports = class <%- name -%>{

  /**
   * constructor - Creates an instance of the model
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({id <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.id = id;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  static readById(id) {

    let responsibleAdapter = registry.filter( adapter => adapters[adapter].recognizeId(id));

    if(responsibleAdapter.length > 1 ){
      throw new Error("IRI has no unique match");
    }else if(responsibleAdapter.length === 0){
      throw new Error("IRI has no match WS");
    }

    return adapters[responsibleAdapter[0] ].readById(id);

  }

  static countRecords(search){
    let promises = registry.map( adapter =>  adapters[adapter].countRecords(search));

    return Promise.all(promises).then( results =>{
      return results.reduce( (total, current)=> total+current, 0);
    });
  }


  static readAllCursor(search, order, pagination) {

    if(pagination === undefined || (pagination.first!==undefined || pagination.cursor !== undefined)){

      let promises = registry.map( adapter => adapters[adapter].readAllCursor(search, order,pagination) );

      return Promise.all(promises).then( results => {
        return results.reduce( (total, current)=> {return total.concat(current.edges)}, [] );
      }).then( edges => {  return {edges: edges} } );

    }else{
      throw new Error("Pagination is expected to be cursor based.You need to specify 'cursor' or 'first' parameters.Please check the documentation.");
    }
  }


}
