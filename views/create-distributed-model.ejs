const _ = require('lodash');
const path = require('path');
const adapters = require('../adapters/index');
const globals = require('../config/globals');
const helper = require('../utils/helper');
const models = require(path.join(__dirname, '..', 'models_index.js'));
const validatorUtil = require('../utils/validatorUtil');

const definition = <%- definition -%>;

let registry = [ <%- registry.map( x => '"'+x+'"') -%> ];

module.exports = class <%- name -%>{

  /**
   * constructor - Creates an instance of the model
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({<%- idAttribute -%> <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.<%- idAttribute -%> = <%- idAttribute -%>;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  /**
   * registeredAdapters - Returns an object which has a key for each
   * adapter on adapter/index.js. Each key of the object will have
   *
   * @return {string}     baseUrl from request.
   */
  static get registeredAdapters() {
    return [<%- registry.map( x => '"'+x+'"') %>].reduce( (a,c) => { a[c] = adapters[c]; return a; }, {} );
  }

  static adapterForIri(iri) {
    let responsibleAdapter = registry.filter(adapter => adapters[adapter].recognizeId(iri));
    if (responsibleAdapter.length > 1) {
      throw new Error("IRI has no unique match");
    } else if (responsibleAdapter.length === 0) {
      throw new Error("IRI has no match WS");
    }
    return responsibleAdapter[0];
  }

  static readById(id) {
    if(id!==null){
      let responsibleAdapter = registry.filter( adapter => adapters[adapter].recognizeId(id));

      if(responsibleAdapter.length > 1 ){
        throw new Error("IRI has no unique match");
      }else if(responsibleAdapter.length === 0){
        throw new Error("IRI has no match WS");
      }

      return adapters[responsibleAdapter[0]].readById(id).then(result => {
        let item = new <%- name -%>(result);
        return validatorUtil.ifHasValidatorFunctionInvoke('validateAfterRead', this, item)
            .then((valSuccess) => {
              return item;
            });
      });
    }
  }

  static countRecords(search, authorizedAdapters, benignErrorReporter){
    let authAdapters = [];
    /**
     * Differentiated cases:
     *    if authorizedAdapters is defined:
     *      - called from resolver.
     *      - authorizedAdapters will no be modified.
     *
     *    if authorizedAdapters is not defined:
     *      - called internally
     *      - authorizedAdapters will be set to registered adapters.
     */
    if(authorizedAdapters === undefined) {
      authAdapters = Object.values(this.registeredAdapters);
    } else {
      authAdapters = Array.from(authorizedAdapters)
    }

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    let promises = authAdapters.map( adapter => {
      /**
       * Differentiated cases:
       *   sql-adapter:
       *      resolve with current parameters.
       *
       *   ddm-adapter:
       *   cenzontle-webservice-adapter:
       *   generic-adapter:
       *      add exclusions to search.excludeAdapterNames parameter.
       */
      switch(adapter.adapterType) {
        case 'ddm-adapter':
        case 'generic-adapter':
          let nsearch = helper.addExclusions(search, adapter.adapterName, Object.values(this.registeredAdapters));
          return adapter.countRecords(nsearch, benignErrorReporter);

        case 'sql-adapter':
        case 'cenzontle-webservice-adapter':
          return adapter.countRecords(search, benignErrorReporter);

        case 'default':
          throw new Error(`Adapter type: '${adapter.adapterType}' is not supported`);
      }
    });

    return Promise.allSettled(promises).then(results => {
        return results.reduce((total, current) => {
            //check if current is Error
            if (current.status === 'rejected') {
                benignErrorReporter.reportError(current.reason);
            }
            //check current result
            else if (current.status === 'fulfilled') {
                total += current.value;
            }
            return total;
        }, 0 );
    });
  }

  static readAllCursor(search, order, pagination, authorizedAdapters, benignErrorReporter) {
    let authAdapters = [];
    /**
     * Differentiated cases:
     *    if authorizedAdapters is defined:
     *      - called from resolver.
     *      - authorizedAdapters will no be modified.
     *
     *    if authorizedAdapters is not defined:
     *      - called internally
     *      - authorizedAdapters will be set to registered adapters.
     */
    if(authorizedAdapters === undefined) {
      authAdapters = Object.values(this.registeredAdapters);
    } else {
      authAdapters = Array.from(authorizedAdapters)
    }

    //check valid pagination arguments
    let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
    if (!argsValid) {
      throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
    }

    let isForwardPagination = !pagination || !(pagination.last != undefined);
    let promises = authAdapters.map(adapter => {
      /**
       * Differentiated cases:
       *   sql-adapter:
       *      resolve with current parameters.
       *
       *   ddm-adapter:
       *   cenzontle-webservice-adapter:
       *   generic-adapter:
       *      add exclusions to search.excludeAdapterNames parameter.
       */
      switch(adapter.adapterType) {
        case 'ddm-adapter':
          let nsearch = helper.addExclusions(search, adapter.adapterName, Object.values(this.registeredAdapters));
          return adapter.readAllCursor(nsearch, order, pagination, benignErrorReporter).catch(benignErrors => benignErrors);

        case 'generic-adapter':
        case 'sql-adapter':
        case 'cenzontle-webservice-adapter':
          return adapter.readAllCursor(search, order, pagination, benignErrorReporter).catch(benignErrors => benignErrors);

        default:
          throw new Error(`Adapter type '${adapter.adapterType}' is not supported`);
      }
    });
    let someHasNextPage = false;
    let someHasPreviousPage = false;
    return Promise.all(promises)
    //phase 1: reduce
    .then( results => {
      return results.reduce( (total, current)=> {
        //check if current is Error
        if (current instanceof Error) {
          total.errors.push(current);
        }
        //check current
        else if(current && current.pageInfo && current.edges) {
          someHasNextPage |= current.pageInfo.hasNextPage;
          someHasPreviousPage |= current.pageInfo.hasPreviousPage;
          total.nodes =  total.nodes.concat(current.edges.map(e => e.node));
        }
        return total;
      }, {nodes: [], errors: []});
    })
    //phase 2: order & paginate
    .then( nodesAndErrors => {
      let nodes = nodesAndErrors.nodes;
      let errors = nodesAndErrors.errors;

      if(order === undefined ){ order = [{field:"<%- idAttribute -%>", order:'ASC'}]; }
      if(pagination === undefined ){ pagination = { first : Math.min(globals.LIMIT_RECORDS, nodes.length)  }}

      let ordered_records = helper.orderRecords(nodes, order);
      let paginated_records = [];

      if(isForwardPagination){
        paginated_records = helper.paginateRecordsCursor(ordered_records, pagination.first);
      } else {
        paginated_records = helper.paginateRecordsBefore(ordered_records, pagination.last);
      }

      let hasNextPage = ordered_records.length > pagination.first || someHasNextPage;
      let hasPreviousPage = ordered_records.length > pagination.last || someHasPreviousPage;

      let graphQLConnection = helper.toGraphQLConnectionObject(paginated_records, this, hasNextPage, hasPreviousPage);
      graphQLConnection['errors'] = errors;
      return graphQLConnection;
    });
  }

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

  base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
    <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */

  static idAttribute() {
    let internalId = <%- name -%>.definition.id.name;
    return internalId;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */

  static idAttributeType() {
    return <%- name -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- name -%>.
   *
   * @return {type} id value
   */

  getIdValue() {
    return this[<%- name -%>.idAttribute()]
  }

  static assertInputHasId(input) {
    if (! input.<%- idAttribute -%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute -%>'.`);
    }
    return true;
  }

  static addOne(input) {
    this.assertInputHasId(input);
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForCreate', this, input)
        .then(async (valSuccess) => {
        let responsibleAdapter = this.adapterForIri(input.<%- idAttribute -%>);
        return adapters[responsibleAdapter].addOne(input).then(result => new <%- name -%>(result));
      });
  }

  static deleteOne(id) {
    let responsibleAdapter = this.adapterForIri(id);
    return adapters[responsibleAdapter].deleteOne(id);
  }

  static updateOne(input) {
    this.assertInputHasId(input);
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForUpdate', this, input)
        .then(async (valSuccess) => {
        let responsibleAdapter = this.adapterForIri(input.<%- idAttribute -%>);
        return adapters[responsibleAdapter].updateOne(input).then(result => new <%- name -%>(result));
    });
  }

  static bulkAddCsv(context) {
    throw new Error("<%- name -%>.bulkAddCsv is not implemented.")
  }

  static csvTableTemplate() {
      return helper.csvTableTemplate(<%- name -%>);
  }

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async <%=associations_temp[i].name%>Impl({search}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>

<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

  <%#
  /**
   * Add and remove methods for to-one association where the foreign key
   * is stored in this model. Also for generic-to-one and generic-to-many
   * associations.
   */
  -%>
  <%- include('./includes/create-ddm-models-fields-mutations', {op: "add"}); %>
  <%- include('./includes/create-ddm-models-fields-mutations', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %>

}
