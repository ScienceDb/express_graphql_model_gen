'use strict';

const _ = require('lodash');
const Sequelize = require('sequelize');
const dict = require('../utils/graphql-sequelize-types');
const searchArg = require('../utils/search-argument');
const globals = require('../config/globals');
const validatorUtil = require('../utils/validatorUtil');
const fileTools = require('../utils/file-tools');
const helpersAcl = require('../utils/helpers-acl');
const email = require('../utils/email');
const fs = require('fs');
const path = require('path');
const os = require('os');
const uuidv4 = require('uuidv4');
const helper = require('../utils/helper');
const models = require(path.join(__dirname, '..', 'models_index.js'));
const moment = require('moment');
const client = require('../utils/cassandra-client');
// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */

module.exports = class <%- name -%> extends Sequelize.Model{
  /*static init(sequelize, DataTypes){
    return super.init({

        <%if(!defaultId){-%>
        <%- idAttribute -%> : {
          type : Sequelize[ dict['<%- idAttributeType %>'] ],
          primaryKey: true
        },
        <%}-%>
      <% let keys = Object.keys(attributes) -%>
      <%for (let i=0; i< keys.length; i++) {-%>
        <% let type_seq =  attributes[ keys[i] ] -%>
        <%=  keys[i] %>: {
            type: Sequelize[ dict['<%= type_seq %>'] ]<% if(type_seq === 'Time' ){-%>,
            get(){
              let <%=  keys[i] %> = this.getDataValue('<%=  keys[i] %>');
              if(<%=  keys[i] %> !== null ){
                let m = moment(<%=  keys[i] %>, "HH:mm:ss.SSS[Z]");
                if(m.isValid()){
                  return m.format("HH:mm:ss.SSS[Z]");
                }
              }
            }
            <%}-%>
        }
        <%if(i !== (keys.length -1) ){ -%>,<%}-%>
      <%}-%>


    },{ <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>
      indexes: [<%- string_indices.join() -%> ], <%}-%>
      modelName: "<%- nameLc -%>",
      tableName: "<%-namePl-%>",
      sequelize
     } );
  }

  static associate(models){
    <% for(var key in associationsArguments){ -%>
      <%for(let i=0; i< associationsArguments[key].length; i++){-%>
        <%if (key !== 'associations'){-%>
          <%if(associationsArguments[key][i].targetStorageType === 'sql'){-%>
            <%if (associationsArguments[key][i].type === 'to_one' && associationsArguments[key][i].keyIn !== associationsArguments[key][i].target){-%>
              <%- name -%>.belongsTo(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if (associationsArguments[key][i].type === 'to_one' && associationsArguments[key][i].keyIn === associationsArguments[key][i].target){-%>
              <%- name -%>.hasOne(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if (associationsArguments[key][i].type === 'to_many' && associationsArguments[key][i].keyIn === associationsArguments[key][i].target){-%>
              <%- name -%>.hasMany(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if (associationsArguments[key][i].type === 'to_many_through_sql_cross_table' ){-%>
              <%- name -%>.belongsToMany(models.<%= associationsArguments[key][i].target_lc -%>
            <%}-%>
            <% if(key === 'to_many_through_sql_cross_table'){ -%> ,{as: '<%= associationsArguments[key][i].name -%>',
            foreignKey:'<%= associationsArguments[key][i].sourceKey -%>',
            through : '<%= associationsArguments[key][i].keysIn -%>',
            onDelete: 'CASCADE'}  <%}else{ -%>
            ,{as: '<%= associationsArguments[key][i].name -%>', foreignKey:'<%= associationsArguments[key][i].targetKey -%>' }
            <%}-%>);
          <%}-%>
        <%}-%>
      <%}-%>
    <% } -%>
  }*/

  static async readById(id){
    const query = `SELECT * FROM <%- name -%> WHERE <%- idAttribute -%> = ?`;
    let item = (await client.execute(query, [ id ], { prepare: true })).first(); // await <%- name -%>.findByPk(id);
    if (item === null) {
        throw new Error(`Record with ID = "${id}" does not exist`);
    }
    return validatorUtil.ifHasValidatorFunctionInvoke('validateAfterRead', this, item)
        .then((valSuccess) => {
            return item
        }).catch((err) => {
            return err
        });
  }

  static async countRecords(search){
    let options = {};
    let result = 0;
    if (search !== undefined) {

      //check
      if(typeof search !== 'object') {
        throw new Error('Illegal "search" argument type, it must be an object.');
      }

      let arg = new searchArg(search);
      /*let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;*/
      let arg_cassandra = arg.toCassandra();
      const query = 'SELECT COUNT(*) AS count FROM <%- name -%> ' + arg_cassandra;
      let item = (await client.execute(query)).first();
      result = item['count'];
    }
    return {sum: result, errors:[]};
  }

  static readAll(search, order, pagination){
    throw new Error('Limit-offset based pagination is not supported by Cassandra');
    /*let options = {};
    if (search !== undefined) {

      //check
      if(typeof search !== 'object') {
        throw new Error('Illegal "search" argument type, it must be an object.');
      }

      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;
    }

    return super.count(options).then(items => {
        if (order !== undefined) {
            options['order'] = order.map((orderItem) => {
                return [orderItem.field, orderItem.order];
            });
        } else if (pagination !== undefined) {
            options['order'] = [
                ["<%- idAttribute -%>", "ASC"]
            ];
        }

        if (pagination !== undefined) {
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
        } else {
            options['offset'] = 0;
            options['limit'] = items;
        }

        if (globals.LIMIT_RECORDS < options['limit']) {
            throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }
        return super.findAll(options);
    });*/
  }

  static readAllCursor(search, order, pagination){
    //check valid pagination arguments
    let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
    if (!argsValid) {
      throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
    }

    let isForwardPagination = !pagination || !(pagination.last != undefined);
    let options = {};
    options['where'] = {};

    /*
     * Search conditions
     */
    if(search !== undefined){

      //check
      if(typeof search !== 'object') {
        throw new Error('Illegal "search" argument type, it must be an object.');
      }

      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;
    }

    /*
     * Count
     */
    return super.count(options).then( countA =>{
      options['offset'] = 0;
      options['order'] = [];
      options['limit'] = countA;
      /*
       * Order conditions
       */
      if(order !== undefined){
        options['order'] = order.map( (orderItem)=>{
          return [orderItem.field, orderItem.order];
        });
      }
      if( !options['order'].map( orderItem=>{return orderItem[0] }).includes("<%- idAttribute -%>") ){
        options['order'] = [ ...options['order'], ...[ ["<%- idAttribute -%>", "ASC"] ]];
      }

      /*
       * Pagination conditions
       */
      if(pagination) {
        //forward
        if(isForwardPagination) {
          if(pagination.after) {
            let decoded_cursor = JSON.parse(this.base64Decode(pagination.after));
            options['where'] = {
                ...options['where'],
                ...helper.parseOrderCursor(options['order'], decoded_cursor, "<%- idAttribute -%>", pagination.includeCursor)
            };
          }
        }else {//backward
          if(pagination.before) {
            let decoded_cursor = JSON.parse(this.base64Decode(pagination.before));
            options['where'] = {
                ...options['where'],
                ...helper.parseOrderCursorBefore(options['order'], decoded_cursor, "<%- idAttribute -%>", pagination.includeCursor)
            };
          }
        }
      }
      //woptions: copy of {options} with only 'where' options
      let woptions = {};
      woptions['where'] = {...options['where']};
      /*
       *  Count (with only where-options)
       */
      return super.count(woptions).then( countB => {
        /*
         * Limit conditions
         */
        if(pagination) {
          //forward
          if(isForwardPagination) {

            if(pagination.first) {
              options['limit'] = pagination.first;
            }
          } else {//backward
            if(pagination.last) {
              options['limit'] = pagination.last;
              options['offset'] = Math.max( (countB - pagination.last), 0 );
            }
          }
        }
        //check: limit
        if(globals.LIMIT_RECORDS < options['limit']) {
          throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }

        /*
         * Get records
         */
        return super.findAll(options).then( records =>{
          let edges = [];
          let pageInfo = {
            hasPreviousPage: false,
            hasNextPage: false,
            startCursor: null,
            endCursor: null
          };

          //edges
          if(records.length > 0) {
            edges = records.map(record => {
              return {
                  node: record,
                  cursor: record.base64Enconde()
              }
            });
          }

          //forward
          if(isForwardPagination) {

            pageInfo = {
              hasPreviousPage: ( (countA - countB) > 0 ),
              hasNextPage: ( pagination&&pagination.first ? (countB > pagination.first) : false ),
              startCursor: (records.length > 0) ? edges[0].cursor : null,
              endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
            }
          } else {//backward

            pageInfo = {
              hasPreviousPage: ( pagination&&pagination.last ? (countB > pagination.last) : false ),
              hasNextPage: ( (countA - countB) > 0 ),
              startCursor: (records.length > 0) ? edges[0].cursor : null,
              endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
            }
          }

          return { edges, pageInfo };

        }).catch(error =>{
          throw error;
        });
      }).catch(error =>{
        throw error;
      });
    }).catch(error =>{
      throw error;
    });
  }

  static addOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForCreate', this, input)
        .then(async (valSuccess) => {
          try{
            const result = await sequelize.transaction( async(t) =>{
              let item = await super.create(input, {transaction:t});
              return item;
            });
            return result;
          }catch(error){
            throw error;
          }
        });
  }

  static deleteOne(id){
    return super.findByPk(id)
        .then(item => {

            if (item === null) return new Error(`Record with ID = ${id} does not exist`);

            return validatorUtil.ifHasValidatorFunctionInvoke('validateForDelete', this, item)
                .then((valSuccess) => {
                    return item
                        .destroy()
                        .then(() => {
                            return 'Item successfully deleted';
                        });
                }).catch((err) => {
                    return err
                })
        });

  }

  static updateOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForUpdate', this, input)
        .then(async (valSuccess) => {
          try{
            let result = await sequelize.transaction( async (t) =>{
              let promises_associations = [];
              let item = await super.findByPk(input[this.idAttribute()], {transaction:t});
              if(item === null) {
                throw new Error(`Record with ID = ${id} does not exist`);
              }
              let updated = await item.update(input, {transaction: t});
              return updated;
            });
            return result;
          }catch(error){
            throw error;
          }
        });
  }

  static bulkAddCsv(context){

      let delim = context.request.body.delim;
      let cols = context.request.body.cols;
      let tmpFile = path.join(os.tmpdir(), uuidv4() + '.csv');

      context.request.files.csv_file.mv(tmpFile).then(() => {

          fileTools.parseCsvStream(tmpFile, this, delim, cols).then((addedZipFilePath) => {
              try {
                  console.log(`Sending ${addedZipFilePath} to the user.`);

                  let attach = [];
                  attach.push({
                      filename: path.basename("added_data.zip"),
                      path: addedZipFilePath
                  });

                  email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                      'ScienceDB batch add',
                      'Your data has been successfully added to the database.',
                      attach).then(function(info) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.log(info);
                  }).catch(function(err) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.error(err);
                  });

              } catch (error) {
                  console.error(error.message);
              }

              fs.unlinkSync(tmpFile);
          }).catch((error) => {
              email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                  'ScienceDB batch add', `${error.message}`).then(function(info) {
                  console.error(info);
              }).catch(function(err) {
                  console.error(err);
              });

              fs.unlinkSync(tmpFile);
          });

      }).catch((error) => {
          throw new Error(error);
      });
  }

  static csvTableTemplate(){
    return helper.csvTableTemplate(<%- name -%>);
  }

  <% associations_temp = associationsArguments["to_many_through_sql_cross_table"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    <%=associations_temp[i].name%>FilterImpl ({search,order,pagination}){
      let options = {};

      if(search!== undefined){
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
      }

      return this.count<%- associations_temp[i].name_cp%>(options).then( items => {
        if(order !== undefined){
          options['order'] = order.map( (orderItem) => {return [ orderItem.field, orderItem.order]; } );
        }else if(pagination !== undefined){
          options['order'] = [ [models.<%=associations_temp[i].target_lc-%>.idAttribute(), "ASC"] ];
        }
        if(pagination !== undefined){
          options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
          options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
        }else{
          options['offset'] = 0;
          options['limit'] = items;
        }
        if(globals.LIMIT_RECORDS < options['limit']){
          throw new Error(`Request of total <%=associations_temp[i].name_lc%>Filter exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }
        return this.get<%- associations_temp[i].name_cp%>(options);
      });
    }


    <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}){
      //check valid pagination arguments
      let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
      if (!argsValid) {
        throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
      }
      let isForwardPagination = !pagination || !(pagination.last != undefined);
      let options = {};
      options['where'] = {};

      /*
       * Search conditions
       */
      if (search !== undefined) {
          let arg = new searchArg(search);
          let arg_sequelize = arg.toSequelize();
          options['where'] = arg_sequelize;
      }

      /*
       * Count
       */
      return this.count<%- associations_temp[i].name_cp%>(options).then( countA => {
        options['offset'] = 0;
        options['order'] = [];
        options['limit'] = countA;
        /*
         * Order conditions
         */
        if(order !== undefined) {
          options['order'] = order.map((orderItem) => {
            return [orderItem.field, orderItem.order];
          });
        }
        if( !options['order'].map( orderItem=>{return orderItem[0] }).includes(models.<%=associations_temp[i].target_lc-%>.idAttribute()) ){
          options['order'] = [ ...options['order'], ...[ [models.<%=associations_temp[i].target_lc-%>.idAttribute(), "ASC"] ]];
        }
        /*
         * Pagination conditions
         */
        if(pagination) {
          //forward
          if(isForwardPagination) {
            if(pagination.after) {
              let decoded_cursor = JSON.parse(<%- name -%>.base64Decode(pagination.after));
              options['where'] = {
                  ...options['where'],
                  ...helper.parseOrderCursor(options['order'], decoded_cursor, models.<%=associations_temp[i].target_lc-%>.idAttribute(), pagination.includeCursor)
              };
            }
          }else {//backward
            if(pagination.before) {
              let decoded_cursor = JSON.parse(<%- name -%>.base64Decode(pagination.before));
              options['where'] = {
                  ...options['where'],
                  ...helper.parseOrderCursorBefore(options['order'], decoded_cursor, models.<%=associations_temp[i].target_lc-%>.idAttribute(), pagination.includeCursor)
              };
            }
          }
        }
        //woptions: copy of {options} with only 'where' options
        let woptions = {};
        woptions['where'] = {...options['where']};

        /*
         *  Count (with only where-options)
         */
        return this.count<%- associations_temp[i].name_cp%>(woptions).then( countB => {
          /*
           * Limit conditions
           */
          if(pagination) {
            //forward
            if(isForwardPagination) {
              if(pagination.first) {
                options['limit'] = pagination.first;
              }
            } else {//backward
              if(pagination.last) {
                options['limit'] = pagination.last;
                options['offset'] = Math.max( (countB - pagination.last), 0 );
              }
            }
          }
          //check: limit
          if(globals.LIMIT_RECORDS < options['limit']) {
            throw new Error(`Request of total <%=associations_temp[i].target_lc_pl-%>Connection exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
          }

          /*
           * Get records
           */
          return this.get<%- associations_temp[i].name_cp%>(options).then( records =>{
            let edges = [];
            let pageInfo = {
              hasPreviousPage: false,
              hasNextPage: false,
              startCursor: null,
              endCursor: null
            };
            //edges
            if(records.length > 0) {
              edges = records.map(record => {
                return {
                  node: record,
                  cursor: record.base64Enconde()
                }
              });
            }

            //forward
            if(isForwardPagination) {
              pageInfo = {
                hasPreviousPage: ( (countA - countB) > 0 ),
                hasNextPage: ( pagination&&pagination.first ? (countB > pagination.first) : false ),
                startCursor: (records.length > 0) ? edges[0].cursor : null,
                endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
              }
            } else {//backward
              pageInfo = {
                hasPreviousPage: ( pagination&&pagination.last ? (countB > pagination.last) : false ),
                hasNextPage: ( (countA - countB) > 0 ),
                startCursor: (records.length > 0) ? edges[0].cursor : null,
                endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
              }
            }
            return {edges, pageInfo};

          }).catch(error =>{
            throw error;
          });
        }).catch(error =>{
          throw error;
        });
      }).catch(error =>{
        throw error;
      });
    }

    countFiltered<%=associations_temp[i].name_cp%>Impl({search}){
      let options = {};
      if(search!== undefined){
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
      }
      return this.count<%- associations_temp[i].name_cp%>(options);
    }
  <%}-%>

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    
    async <%=associations_temp[i].name%>Impl({search}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>
  
<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

  <%- include('./includes/create-models-fieldMutations', {op: "add"}); %> 
  <%- include('./includes/create-models-fieldMutations', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %> 
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %> 
  
  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */

  static idAttribute() {
    return <%- name -%>.definition.id.name;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */

  static idAttributeType() {
    return <%- name -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- name -%>.
   *
   * @return {type} id value
   */

  getIdValue() {
    return this[<%- name -%>.idAttribute()]
  }

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

    base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
  <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  static externalIdsArray(){
    let externalIds = [];
    if(definition.externalIds){
      externalIds = definition.externalIds;
    }

    return externalIds;
  }

  static externalIdsObject(){
    return {
      <%for(let i=0; i < externalIds.length; i++){-%> <%=externalIds[i]-%>: '<%=attributes[ externalIds[i] ]-%>' <%if(i !== (externalIds.length -1) ){ -%>,<%}-%><%}-%>
    };
  }

}
