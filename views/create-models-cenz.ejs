const _ = require('lodash');
const path = require('path');
const models = require(path.join(__dirname, '..', 'models_index.js'));
const axios_general = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const os = require('os');
const uuidv4 = require('uuidv4').uuid;
const globals = require('../config/globals');
const validatorUtil = require('../utils/validatorUtil');
const helper = require('../utils/helper');
const errorHelper = require('../utils/errors');

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

const url = "<%- url -%>";
let axios = axios_general.create();
axios.defaults.timeout = globals.MAX_TIME_OUT;

module.exports = class <%- name -%>{

  /**
   * constructor - Creates an instance of the model stored in webservice
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({<%- idAttribute -%> <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.<%- idAttribute -%> = <%- idAttribute -%>;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  static async readById( id, benignErrorReporter){
    let query = `query readOne<%- nameCp -%>{ readOne<%- nameCp -%>(<%- idAttribute -%>: "${id}"){<%- idAttribute -%> <%for(var key in attributes){-%>
      <%=key %>
    <%}-%> } }`
    
    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(url, {query:query});
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if (response && response.data && response.data.data) {
        let item = new <%- name -%>(response.data.data.readOne<%- nameCp -%>);
        await validatorUtil.ifHasValidatorFunctionInvoke('validateAfterRead', this, item);
        return item;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async countRecords(search, benignErrorReporter){
    let query = `query count<%- namePlCp -%>($search: search<%- nameCp -%>Input){
      count<%- namePlCp -%>(search: $search)
    }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef(benignErrorReporter);

    try {
      let response = await axios.post(url, {query:query, variables:{search: search}});
      if(response && response.data && response.data.data) {
        return response.data.data.count<%- namePlCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error){
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async readAll(search, order, pagination, benignErrorReporter){
    let query = `query <%- namePl -%>($search: search<%- nameCp -%>Input $pagination: paginationInput $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>(search:$search pagination:$pagination order:$order){<%- idAttribute -%> <%for(var key in attributes){-%>
         <%=key %>
       <%}-%> } }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(url, {query:query, variables: {search: search, order:order, pagination: pagination}});
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        let data = response.data.data.<%- namePl -%> ;
        return data.map(item => {return new <%- name -%>(item) });
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error){
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async readAllCursor(search, order, pagination, benignErrorReporter){
    //check valid pagination arguments
    let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
    if (!argsValid) {
      throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
    }

    let query = `query <%- namePl -%>Connection($search: search<%- nameCp -%>Input $pagination: paginationCursorInput $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>Connection(search:$search pagination:$pagination order:$order){ edges{cursor node{  <%- idAttribute -%> <%for(var key in attributes){-%> <%=key %>
       <%}-%>} } pageInfo{startCursor endCursor hasPreviousPage hasNextPage  } } }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(url, {query:query, variables: {search: search, order:order, pagination: pagination}});
      //check if remote service returned benign Errors in te response and add them to the benignErrorReporter
      errorHelper.handleErrorsInGraphQlResponse(response.data, benignErrorReporter);
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        let data_edges = response.data.data.<%- namePl -%>Connection.edges;
        let pageInfo = response.data.data.<%- namePl -%>Connection.pageInfo;

        let edges = data_edges.map( e =>{
          return {
            node: new <%- name -%>(e.node),
            cursor: e.cursor
          }
        })

        return { edges, pageInfo };
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async addOne(input, benignErrorReporter){
    let query = `
            mutation add<%- nameCp _%>(
    <%if(!defaultId){-%>
              $<%=idAttribute%>:ID! <%}-%> <%for(var key in editableAttributes){%>
              $<%=key %>:<%= editableAttributes[key]%><%}-%>
            ){
              add<%- nameCp -%>(<%if(!defaultId){-%>
              <%=idAttribute %>:$<%= idAttribute%> <%}-%> <%for(var key in editableAttributes){%>
              <%=key %>:$<%= key%><%}-%>){
                <%- idAttribute -%>
    <%for(var key in attributes){-%>
                <%=key %>
    <%}-%>
              }
            }`;

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      await validatorUtil.ifHasValidatorFunctionInvoke('validateForCreate', this, input);
      // Send an HTTP request to the remote server
      let response = await axios.post(url, {query:query, variables:input});
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return new <%- name -%>(response.data.data.add<%- nameCp -%>);
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async deleteOne(id, benignErrorReporter){
    let query = `
              mutation
                delete<%- nameCp -%>{
                  delete<%- nameCp -%>(
                    <%- idAttribute -%>: "${id}" )}`;

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(url, {query: query});
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return response.data.data.delete<%- nameCp -%>;
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async updateOne(input, benignErrorReporter){
    let query = `
            mutation
              update<%- nameCp-%>(
                $<%- idAttribute -%>:ID! <%for(var key in editableAttributes){%>
                $<%=key %>:<%= editableAttributes[key]%> <%}-%>
              ){
                update<%- nameCp-%>(
                  <%- idAttribute -%>:$<%- idAttribute -%> <%for(var key in editableAttributes){%>
                  <%=key %>:$<%= key%> <%}-%>
                ){
                  <%- idAttribute -%> <%for(var key in attributes){%>
                  <%=key %> <%}%>
                }
              }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      await validatorUtil.ifHasValidatorFunctionInvoke('validateForUpdate', this, input);
      // Send an HTTP request to the remote server
      let response = await axios.post(url, {query:query, variables:input});
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return new <%- name -%>(response.data.data.update<%- nameCp -%>);
      } else {
        throw new Error(`Invalid response from remote cenz-server: ${url}`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async bulkAddCsv(context, benignErrorReporter){
    let tmpFile = path.join(os.tmpdir(), uuidv4()+'.csv');

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      let csvRequestMv = await context.request.files.csv_file.mv(tmpFile);
      let query = `mutation {bulkAdd<%- nameCp -%>Csv{<%- idAttribute -%>}}`;
      let formData = new FormData();
      formData.append('csv_file', fs.createReadStream(tmpFile));
      formData.append('query', query);

      let response = await axios.post(url, formData,  {
        headers: formData.getHeaders()
      });
      return response.data.data.bulkAdd<%- nameCp -%>Csv;

    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

  static async csvTableTemplate(benignErrorReporter){
    let query = `query { csvTableTemplate<%- nameCp-%> }`;
    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      let response = await axios.post(url, {query:query});
      return response.data.data.csvTableTemplate<%- nameCp-%>;
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, url);
    }
  }

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    
    async <%=associations_temp[i].name%>Impl({search}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>
  
<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

   <%#
  /**
   * Add and remove methods for to-one association where the foreign key
   * is stored in this model and therefore this adapter is the responsible to update the foreign key.
   * Also add and remove methods for generic-to-one and generic-to-many associations.
   */
  -%>
  <%- include('./includes/create-models-cenz-fieldMutations', {op: "add"}); %>
  <%- include('./includes/create-models-cenz-fieldMutations', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %> 
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %>


  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

  base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
    <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */

  static idAttribute() {
    return <%- name -%>.definition.id.name;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */

  static idAttributeType() {
    return <%- name -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- name -%>.
   *
   * @return {type} id value
   */

  getIdValue() {
    return this[<%- name -%>.idAttribute()]
  }
};
