const _ = require('lodash');
const path = require('path');
const models = require(path.join(__dirname, '..', 'models_index.js'));

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

module.exports = class <%- name -%>{

  /**
   * constructor - Creates an instance of the model stored in webservice
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({id <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.id = id;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static readById( id ){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('readOne<%- nameCp -%> is not implemented');
  }

  static countRecords(search){

    /*
    YOUR CODE GOES HERE
    */
    throw new Error('count<%- namePlCp -%> is not implemented');
  }

  static readAll(search, order, pagination){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('Read all <%- namePl -%> is not implemented');

  }

  static addOne(input){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('add<%- nameCp -%> is not implemented');
  }

  static deleteOne(id){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('delete<%- nameCp -%> is not implemented');
  }

  static updateOne(input){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('update<%- nameCp-%> is not implemented');
  }

  static bulkAddCsv(context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('bulkAdd<%- nameCp -%>Csv is not implemented');
  }

  static  csvTableTemplate(){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('csvTableTemplate<%- nameCp-%> is not implemented');
    }

    <%let associations_one = associations["belongsTo"]-%>
    <% for(let i=0; i < associations_one.length; i++){ -%>

    <%=associations_one[i].name%>Impl (search){
        if(search === undefined){
          return models.<%=associations_one[i].target_lc%>.readById(this.<%=associations_one[i].targetKey%>);
        }else{
          /*
          YOUR CODE GOES HERE
          */
          throw new Error('<%=associations_one[i].name%>Impl is not implemented in the model');
        }
      }
    <%}-%>

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

  base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
    attributes.push('id');
    let data_values = _.pick(this, attributes);
    return data_values;
  }


};
