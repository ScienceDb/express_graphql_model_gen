'use strict';

const _ = require('lodash');
const Sequelize = require('sequelize');
const dict = require('../utils/graphql-sequelize-types');
const searchArg = require('../utils/search-argument');
const globals = require('../config/globals');
const validatorUtil = require('../utils/validatorUtil');
const fileTools = require('../utils/file-tools');
const helpersAcl = require('../utils/helpers-acl');
const email = require('../utils/email');
const fs = require('fs');
const path = require('path');
const os = require('os');
const uuidv4 = require('uuidv4');
const helper = require('../utils/helper');
const models = require(path.join(__dirname, '..', 'models_index.js'));
const moment = require('moment');
// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */

module.exports = class <%- name -%> extends Sequelize.Model{

  static init(sequelize, DataTypes){
    return super.init({

        <%if(!defaultId){-%>
        <%- idAttribute -%> : {
          type : Sequelize[ dict['<%- idAttributeType %>'] ],
          primaryKey: true
        },
        <%}-%>
      <% let keys = Object.keys(attributes) -%>
      <%for (let i=0; i< keys.length; i++) {-%>
        <% let type_seq =  attributes[ keys[i] ] -%>
        <%=  keys[i] %>: {
            type: Sequelize[ dict['<%= type_seq %>'] ]<% if(type_seq === 'Time' ){-%>,
            get(){
              let <%=  keys[i] %> = this.getDataValue('<%=  keys[i] %>');
              if(<%=  keys[i] %> !== null ){
                let m = moment(<%=  keys[i] %>, "HH:mm:ss.SSS[Z]");
                if(m.isValid()){
                  return m.format("HH:mm:ss.SSS[Z]");
                }
              }
            }
            <%}-%>
        }
        <%if(i !== (keys.length -1) ){ -%>,<%}-%>
      <%}-%>


    },{ <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>
      indexes: [<%- string_indices.join() -%> ], <%}-%>
      modelName: "<%- nameLc -%>",
      tableName: "<%-namePl-%>",
      sequelize
     } );
  }

  static associate(models){
    <% for(var key in associations){ -%>
      <%for(let i=0; i< associations[key].length; i++){-%>
        <%if(associations[key][i].targetStorageType === 'sql'){-%>
        <%- name -%>.<%= key %>(models.<%= associations[key][i].target_lc -%>
        <% if(key === 'belongsToMany'){ -%> ,{as: '<%= associations[key][i].name -%>',
        foreignKey:'<%= associations[key][i].sourceKey -%>',
        through : '<%= associations[key][i].keysIn -%>',
        onDelete: 'CASCADE'}  <%}else{ -%>
          ,{as: '<%= associations[key][i].name -%>', foreignKey:'<%= associations[key][i].targetKey -%>' }
          <%}-%>);
        <%}-%>
      <%}-%>
    <% } -%>
  }

  static readById(id){
    let options = {};
    options['where'] = {};
    options['where'][this.idAttribute()] = id;
    return <%- name -%>.findOne(options);
  }

  static countRecords(search){
    let options = {};
    if (search !== undefined) {
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
    }
    return super.count(options);
  }

  static readAll(search, order, pagination){
    let options = {};
    if (search !== undefined) {
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
    }

    return super.count(options).then(items => {
        if (order !== undefined) {
            options['order'] = order.map((orderItem) => {
                return [orderItem.field, orderItem.order];
            });
        } else if (pagination !== undefined) {
            options['order'] = [
                ["<%- idAttribute -%>", "ASC"]
            ];
        }

        if (pagination !== undefined) {
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
        } else {
            options['offset'] = 0;
            options['limit'] = items;
        }

        if (globals.LIMIT_RECORDS < options['limit']) {
            throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }
        return super.findAll(options);
    });
  }

  static readAllCursor(search, order, pagination){
    //check valid pagination arguments
    let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
    if (!argsValid) {
      throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
    }

    let isForwardPagination = !pagination || !(pagination.last != undefined);
    let options = {};
    options['where'] = {};

    /*
     * Search conditions
     */
    if(search !== undefined){
      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;
    }

    /*
     * Count
     */
    return super.count(options).then( countA =>{
      options['offset'] = 0;
      options['order'] = [];
      options['limit'] = countA;
      /*
       * Order conditions
       */
      if(order !== undefined){
        options['order'] = order.map( (orderItem)=>{
          return [orderItem.field, orderItem.order];
        });
      }
      if( !options['order'].map( orderItem=>{return orderItem[0] }).includes("<%- idAttribute -%>") ){
        options['order'] = [ ...options['order'], ...[ ["<%- idAttribute -%>", "ASC"] ]];
      }

      /*
       * Pagination conditions
       */
      if(pagination) {
        //forward
        if(isForwardPagination) {
          if(pagination.after) {
            let decoded_cursor = JSON.parse(this.base64Decode(pagination.after));
            options['where'] = {
                ...options['where'],
                ...helper.parseOrderCursor(options['order'], decoded_cursor, "<%- idAttribute -%>", pagination.includeCursor)
            };
          }
        }else {//backward
          if(pagination.before) {
            let decoded_cursor = JSON.parse(this.base64Decode(pagination.before));
            options['where'] = {
                ...options['where'],
                ...helper.parseOrderCursorBefore(options['order'], decoded_cursor, "<%- idAttribute -%>", pagination.includeCursor)
            };
          }
        }
      }
      //woptions: copy of {options} with only 'where' options
      let woptions = {};
      woptions['where'] = {...options['where']};
      /*
       *  Count (with only where-options)
       */
      return super.count(woptions).then( countB => {
        /*
         * Limit conditions
         */
        if(pagination) {
          //forward
          if(isForwardPagination) {

            if(pagination.first) {
              options['limit'] = pagination.first;
            }
          } else {//backward
            if(pagination.last) {
              options['limit'] = pagination.last;
              options['offset'] = Math.max( (countB - pagination.last), 0 );
            }
          }
        }
        //check: limit
        if(globals.LIMIT_RECORDS < options['limit']) {
          throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }

        /*
         * Get records
         */
        return super.findAll(options).then( records =>{
          let edges = [];
          let pageInfo = {
            hasPreviousPage: false,
            hasNextPage: false,
            startCursor: null,
            endCursor: null
          };

          //edges
          if(records.length > 0) {
            edges = records.map(record => {
              return {
                  node: record,
                  cursor: record.base64Enconde()
              }
            });
          }

          //forward
          if(isForwardPagination) {

            pageInfo = {
              hasPreviousPage: ( (countA - countB) > 0 ),
              hasNextPage: ( pagination&&pagination.first ? (countB > pagination.first) : false ),
              startCursor: (records.length > 0) ? edges[0].cursor : null,
              endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
            }
          } else {//backward

            pageInfo = {
              hasPreviousPage: ( pagination&&pagination.last ? (countB > pagination.last) : false ),
              hasNextPage: ( (countA - countB) > 0 ),
              startCursor: (records.length > 0) ? edges[0].cursor : null,
              endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
            }
          }

          return { edges, pageInfo };

        }).catch(error =>{
          throw error;
        });
      }).catch(error =>{
        throw error;
      });
    }).catch(error =>{
      throw error;
    });
  }

  static addOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForCreate', this, input)
        .then(async (valSuccess) => {
          try{
            const result = await sequelize.transaction( async(t) =>{
              let item = await super.create(input, {transaction:t});
              let promises_associations = [];
              <%associations_temp = associations["hasMany"].concat(associations["belongsToMany"])-%>
              <%for(let i=0; i < associations_temp.length; i++){-%>
                <%if(associations_temp[i].targetStorageType === 'sql'){-%>
                  if(input.add<%=associations_temp[i].name_cp-%>){
                    //let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                    //if(wrong_ids.length > 0){
                    //    throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                    //}else{
                      promises_associations.push( item.set<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>, {transaction:t}));
                    //}
                  }
                <%}-%>
                <%}-%>

                <%associations_temp = associations["belongsTo"].concat(associations["hasOne"])-%>
                <%for(let i=0; i < associations_temp.length; i++){-%>
                  <%if(associations_temp[i].targetStorageType === 'sql'){-%>
                    if(input.add<%=associations_temp[i].name_cp-%> ){
                      //let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                      //if(wrong_ids.length > 0){
                      //  throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                      //}else{
                        promises_associations.push( item.set<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>, {transaction:t}));
                      //}
                    }
                  <%}-%>
                  <%}-%>
              return Promise.all(promises_associations).then(() => {return item});
            });

            <%associations_temp = associations["belongsTo"].concat(associations["hasOne"]).concat(associations["hasMany"]).concat(associations["belongsToMany"])-%>
            <%for(let i=0; i < associations_temp.length; i++){-%>
              <%if(associations_temp[i].targetStorageType !== 'sql'){-%>
                if(input.add<%=associations_temp[i].name_cp-%> ){
                  //let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                  //if(wrong_ids.length > 0){
                  //  throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                  //}else{
                    await result._add<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>);
                  //}
                }
              <%}-%>
              <%}-%>
            return result;
          }catch(error){
            throw error;
          }
        });
  }

  static deleteOne(id){
    return super.findByPk(id)
        .then(item => {

            if (item === null) return new Error(`Record with ID = ${id} not exist`);

            return validatorUtil.ifHasValidatorFunctionInvoke('validateForDelete', this, item)
                .then((valSuccess) => {
                    return item
                        .destroy()
                        .then(() => {
                            return 'Item successfully deleted';
                        });
                }).catch((err) => {
                    return err
                })
        });

  }

  static updateOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForUpdate', this, input)
        .then(async (valSuccess) => {
          try{
            let result = await sequelize.transaction( async (t) =>{
              let promises_associations = [];
              let item = await super.findByPk(input[this.idAttribute()], {transaction:t});
              let updated = await item.update(input, {transaction: t});
              <%associations_temp = associations["hasMany"].concat(associations["belongsToMany"])-%>
              <%for(let i=0; i < associations_temp.length; i++){-%>
                <%if(associations_temp[i].targetStorageType === 'sql'){-%>

                  if(input.add<%=associations_temp[i].name_cp-%> ){
                    //let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                    //if(wrong_ids.length > 0){
                    //  throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                    //}else{
                      promises_associations.push(updated.add<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>, {transaction:t}));
                    //}
                  }

                  if(input.remove<%=associations_temp[i].name_cp-%>){
                    //let ids_associated = await item.get<%=associations_temp[i].name_cp-%>().map(t => `${t[models.<%=associations_temp[i].target_lc-%>.idAttribute()]}`);
                    //await helper.asyncForEach(input.remove<%=associations_temp[i].name_cp-%>, id =>{
                    //  if(!ids_associated.includes(id)){
                    //    throw new Error(`The association with id ${id} that you're trying to remove desn't exists`);
                    //  }
                    //});
                    promises_associations.push(updated.remove<%=associations_temp[i].name_cp-%>(input.remove<%=associations_temp[i].name_cp-%>, {transaction:t}));
                  }
                <%}-%>
              <%}-%>
              <%associations_temp = associations["hasOne"].concat(associations["belongsTo"])-%>
              <%for(let i=0; i < associations_temp.length; i++){-%>
                <%if(associations_temp[i].targetStorageType === 'sql'){-%>
                  if(input.add<%=associations_temp[i].name_cp-%> ){
                    //let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                    //if(wrong_ids.length > 0){
                    //  throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                    //}else{
                      promises_associations.push( updated.set<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>, {transaction: t}));
                    //}
                  }else if(input.add<%=associations_temp[i].name_cp-%> === null ){
                    promises_associations.push(updated.set<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>, {transaction: t}));
                  }

                  if(input.remove<%=associations_temp[i].name_cp-%>){
                      let <%=associations_temp[i].name-%> = await item.get<%=associations_temp[i].name_cp-%>();
                      if(<%=associations_temp[i].name-%> && input.remove<%=associations_temp[i].name_cp-%> === `${<%=associations_temp[i].name-%>[models.<%=associations_temp[i].target_lc-%>.idAttribute()]}`){promises_associations.push(updated.set<%=associations_temp[i].name_cp-%>(null, {transaction: t}));}
                      else{
                        throw new Error("The association you're trying to remove it doesn't exists");
                      }
                  }
                <%}-%>
              <%}-%>

              return  Promise.all(promises_associations).then( () => { return updated; } );
            });

            <%associations_temp = associations["belongsTo"].concat(associations["hasOne"])-%>
            <%for(let i=0; i < associations_temp.length; i++){-%>
              <%if(associations_temp[i].targetStorageType !== 'sql'){-%>
                if(input.add<%=associations_temp[i].name_cp-%> ){
                  let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                  if(wrong_ids.length > 0){
                    throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                  }else{
                    await result._add<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>);
                  }
                }

                if(input.remove<%=associations_temp[i].name_cp-%>){
                  //let <%=associations_temp[i].name-%> = await result.<%=associations_temp[i].name-%>Impl();
                  //if(<%=associations_temp[i].name-%> && input.remove<%=associations_temp[i].name_cp-%> === `${<%=associations_temp[i].name-%>[models.<%=associations_temp[i].target_lc-%>.idAttribute()]}`){
                    await result._remove<%=associations_temp[i].name_cp-%>(input.remove<%=associations_temp[i].name_cp-%>);
                  //}
                  //else{
                  //  throw new Error("The association you're trying to remove it doesn't exists");
                  //}
                }
              <%}-%>
              <%}-%>


              <%associations_temp =  associations["hasMany"].concat(associations["belongsToMany"])-%>
              <%for(let i=0; i < associations_temp.length; i++){-%>
                <%if(associations_temp[i].targetStorageType !== 'sql'){-%>
                  if(input.add<%=associations_temp[i].name_cp-%> ){
                    //let wrong_ids =  await helper.checkExistence(input.add<%=associations_temp[i].name_cp-%>, models.<%=associations_temp[i].target_lc-%>);
                    //if(wrong_ids.length > 0){
                    //  throw new Error(`Ids ${wrong_ids.join(",")} in model <%=associations_temp[i].target_lc-%> were not found.`);
                    //}else{
                      await result._add<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>);
                    //}
                  }

                  if(input.remove<%=associations_temp[i].name_cp-%>){
                    //let ids_associated = await result.<%=associations_temp[i].name-%>Impl().map(t => `${t[models.<%=associations_temp[i].target_lc-%>.idAttribute()]}`);
                    //await helper.asyncForEach(input.remove<%=associations_temp[i].name_cp-%>, async id =>{
                    //  if(!ids_associated.includes(id)){
                    //    throw new Error(`The association with id ${id} that you're trying to remove desn't exist`);
                    //  }
                    //});
                    await result._remove<%=associations_temp[i].name_cp-%>(input.remove<%=associations_temp[i].name_cp-%>);
                  }
                <%}-%>
                <%}-%>


            return result;
          }catch(error){
            throw error;
          }
        });
  }

  static bulkAddCsv(context){

      let delim = context.request.body.delim;
      let cols = context.request.body.cols;
      let tmpFile = path.join(os.tmpdir(), uuidv4() + '.csv');

      context.request.files.csv_file.mv(tmpFile).then(() => {

          fileTools.parseCsvStream(tmpFile, this, delim, cols).then((addedZipFilePath) => {
              try {
                  console.log(`Sending ${addedZipFilePath} to the user.`);

                  let attach = [];
                  attach.push({
                      filename: path.basename("added_data.zip"),
                      path: addedZipFilePath
                  });

                  email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                      'ScienceDB batch add',
                      'Your data has been successfully added to the database.',
                      attach).then(function(info) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.log(info);
                  }).catch(function(err) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.error(err);
                  });

              } catch (error) {
                  console.error(error.message);
              }

              fs.unlinkSync(tmpFile);
          }).catch((error) => {
              email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                  'ScienceDB batch add', `${error.message}`).then(function(info) {
                  console.error(info);
              }).catch(function(err) {
                  console.error(err);
              });

              fs.unlinkSync(tmpFile);
          });

      }).catch((error) => {
          throw new Error(error);
      });
  }

  static csvTableTemplate(){
    return helper.csvTableTemplate(<%- name -%>);
  }

  <%let associations_one = associations["belongsTo"]-%>
  <% for(let i=0; i < associations_one.length; i++){ -%>

    set_<%=associations_one[i].targetKey%>( value ){
      this.<%=associations_one[i].targetKey%> = value;
      return super.save();
    }


  _add<%=associations_one[i].name_cp%>(id){
    return this.set_<%=associations_one[i].targetKey%>(id);
  }

  _remove<%=associations_one[i].name_cp%>(id){
    return this.set_<%=associations_one[i].targetKey%>(null);
  }

  <%=associations_one[i].name%>Impl (search){
      if(search === undefined){
        return models.<%=associations_one[i].target_lc%>.readById(this.<%=associations_one[i].targetKey%>);
      }else{
        let id_search = {
            "field": models.<%=associations_one[i].target_lc%>.idAttribute(),
            "value": {
              "value": this.<%=associations_one[i].targetKey%>
            },
            "operator": "eq"
        }

        let ext_search = {
          "operator": "and",
          "search": [id_search, search]
        }

        return models.<%=associations_one[i].target_lc%>.readAll(ext_search)
        .then( found =>{
            if(found){
              return found[0]
            }
            return found;
        });

      }
    }
  <%}-%>


  <%associations_one = associations["hasOne"]-%>
  <% for(let i=0; i < associations_one.length; i++){ -%>

    async _add<%=associations_one[i].name_cp%>(id){
      let record = await models.<%=associations_one[i].target_lc%>.readById(id);
      await record.set_<%=associations_one[i].targetKey%>(this.getIdValue());
    }

    async _remove<%=associations_one[i].name_cp%>(id){
      let record = await models.<%=associations_one[i].target_lc%>.readById(id);
      await record.set_<%=associations_one[i].targetKey%>(null);
    }

    <%=associations_one[i].name%>Impl(search){

      let simple_search = {
        "field": "<%=associations_one[i].targetKey%>",
        "value": {
          "value": this.getIdValue()
        },
        "operator": "eq"
      }

      let ext_search = simple_search;

      if(search !== undefined){
        ext_search = {
          "operator": "and",
          "search": [simple_search, search]
        }
      }

      return models.<%=associations_one[i].target_lc%>.readAll(ext_search)
      .then( found => { if(found){
        return found[0];
      }
        return found;
      })
    }
  <%}-%>

  <% associations_temp = associations["hasMany"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async _remove<%=associations_temp[i].name_cp%>(ids){
      await helper.asyncForEach(ids, async id =>{
        let record = await models.<%=associations_temp[i].target_lc%>.readById(id);
        await record.set_<%=associations_temp[i].targetKey%>(null);
      });
    }

    async _add<%=associations_temp[i].name_cp%>(ids){
      await helper.asyncForEach(ids, async id =>{
        let record = await models.<%=associations_temp[i].target_lc%>.readById(id);
        await record.set_<%=associations_temp[i].targetKey%>(this.getIdValue());
      });
    }

    <%=associations_temp[i].name%>FilterImpl({search,order,pagination}){
      if(search === undefined)
      {
        return models.<%=associations_temp[i].target_lc%>.readAll({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.getIdValue() }, "operator": "eq"}, order, pagination);
      }else{
        return models.<%=associations_temp[i].target_lc%>.readAll({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.getIdValue() }, "operator": "eq"} , search] }, order, pagination )
      }
    }

    countFiltered<%=associations_temp[i].name_cp%>Impl ({search}){

      if(search === undefined)
      {
        return models.<%=associations_temp[i].target_lc%>.countRecords({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.getIdValue() }, "operator": "eq"} );
      }else{
        return models.<%=associations_temp[i].target_lc%>.countRecords({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.getIdValue() }, "operator": "eq"} , search] })
      }

    }

    <%=associations_temp[i].name%>ConnectionImpl({search,order,pagination}){
      if(search === undefined)
      {
        return models.<%=associations_temp[i].target_lc%>.readAllCursor({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.getIdValue() }, "operator": "eq"}, order, pagination);
      }else{
        return models.<%=associations_temp[i].target_lc%>.readAllCursor({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.getIdValue() }, "operator": "eq"} , search] }, order, pagination )
      }
    }
  <%}-%>


  <% associations_temp = associations["belongsToMany"]-%>

  <% for(let i=0; i < associations_temp.length; i++){ -%>

    async _add<%=associations_temp[i].name_cp%>(ids){
        await helper.asyncForEach(ids, async id =>{
          let input = {
            <%- associations_temp[i].sourceKey%>: this.getIdValue(),
            <%- associations_temp[i].targetKey%>: id
          }
          await models.<%- associations_temp[i].keysIn%>.addOne(input);
        });
    }

    async _remove<%=associations_temp[i].name_cp%>(ids){
        await helper.asyncForEach(ids, async id =>{
          let search_a = {
            "field": "<%- associations_temp[i].sourceKey%>",
            "value": { "value": this.getIdValue()},
            "operator": "eq"

          }

          let search_b = {
            "field": "<%- associations_temp[i].targetKey%>",
            "value":{"value": id},
            "operator": "eq"
          }
          let record = await models.<%- associations_temp[i].keysIn%>.readAll({operator: "and", search:[search_a, search_b]});
          await models.<%- associations_temp[i].keysIn%>.deleteOne(record[0][models.<%- associations_temp[i].keysIn%>.idAttribute()]);
        });
    }

    <%=associations_temp[i].name%>FilterImpl ({search,order,pagination}){

    <%if(associations_temp[i].targetStorageType === 'sql'){-%>
        let options = {};

        if(search!== undefined){
          let arg = new searchArg(search);
          let arg_sequelize = arg.toSequelize();
          options['where'] = arg_sequelize;
        }

        return this.count<%- associations_temp[i].name_cp%>(options).then( items => {
          if(order !== undefined){
            options['order'] = order.map( (orderItem) => {return [ orderItem.field, orderItem.order]; } );
          }else if(pagination !== undefined){
            options['order'] = [ [models.<%=associations_temp[i].target_lc-%>.idAttribute(), "ASC"] ];
          }
          if(pagination !== undefined){
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
          }else{
            options['offset'] = 0;
            options['limit'] = items;
          }
          if(globals.LIMIT_RECORDS < options['limit']){
            throw new Error(`Request of total <%=associations_temp[i].name_lc%>Filter exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
          }
          return this.get<%- associations_temp[i].name_cp%>(options);
        });
      <%}else{%>
        throw new Error('  <%=associations_temp[i].name%>FilterImpl is not implemented in the model');
      <%}-%>
    }


    <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}){

    <%if(associations_temp[i].targetStorageType === 'sql'){-%>
      //check valid pagination arguments
      let argsValid = (pagination === undefined) || (pagination.first && !pagination.before && !pagination.last) || (pagination.last && !pagination.after && !pagination.first);
      if (!argsValid) {
        throw new Error('Illegal cursor based pagination arguments. Use either "first" and optionally "after", or "last" and optionally "before"!');
      }
      let isForwardPagination = !pagination || !(pagination.last != undefined);
      let options = {};
      options['where'] = {};

      /*
       * Search conditions
       */
      if (search !== undefined) {
          let arg = new searchArg(search);
          let arg_sequelize = arg.toSequelize();
          options['where'] = arg_sequelize;
      }

      /*
       * Count
       */
      return this.count<%- associations_temp[i].name_cp%>(options).then( countA => {
        options['offset'] = 0;
        options['order'] = [];
        options['limit'] = countA;
        /*
         * Order conditions
         */
        if(order !== undefined) {
          options['order'] = order.map((orderItem) => {
            return [orderItem.field, orderItem.order];
          });
        }
        if( !options['order'].map( orderItem=>{return orderItem[0] }).includes(models.<%=associations_temp[i].target_lc-%>.idAttribute()) ){
          options['order'] = [ ...options['order'], ...[ [models.<%=associations_temp[i].target_lc-%>.idAttribute(), "ASC"] ]];
        }
        /*
         * Pagination conditions
         */
        if(pagination) {
          //forward
          if(isForwardPagination) {
            if(pagination.after) {
              let decoded_cursor = JSON.parse(<%- name -%>.base64Decode(pagination.after));
              options['where'] = {
                  ...options['where'],
                  ...helper.parseOrderCursor(options['order'], decoded_cursor, models.<%=associations_temp[i].target_lc-%>.idAttribute(), pagination.includeCursor)
              };
            }
          }else {//backward
            if(pagination.before) {
              let decoded_cursor = JSON.parse(<%- name -%>.base64Decode(pagination.before));
              options['where'] = {
                  ...options['where'],
                  ...helper.parseOrderCursorBefore(options['order'], decoded_cursor, models.<%=associations_temp[i].target_lc-%>.idAttribute(), pagination.includeCursor)
              };
            }
          }
        }
        //woptions: copy of {options} with only 'where' options
        let woptions = {};
        woptions['where'] = {...options['where']};

        /*
         *  Count (with only where-options)
         */
        return this.count<%- associations_temp[i].name_cp%>(woptions).then( countB => {
          /*
           * Limit conditions
           */
          if(pagination) {
            //forward
            if(isForwardPagination) {
              if(pagination.first) {
                options['limit'] = pagination.first;
              }
            } else {//backward
              if(pagination.last) {
                options['limit'] = pagination.last;
                options['offset'] = Math.max( (countB - pagination.last), 0 );
              }
            }
          }
          //check: limit
          if(globals.LIMIT_RECORDS < options['limit']) {
            throw new Error(`Request of total <%=associations_temp[i].target_lc_pl-%>Connection exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
          }

          /*
           * Get records
           */
          return this.get<%- associations_temp[i].name_cp%>(options).then( records =>{
            let edges = [];
            let pageInfo = {
              hasPreviousPage: false,
              hasNextPage: false,
              startCursor: null,
              endCursor: null
            };
            //edges
            if(records.length > 0) {
              edges = records.map(record => {
                return {
                  node: record,
                  cursor: record.base64Enconde()
                }
              });
            }

            //forward
            if(isForwardPagination) {
              pageInfo = {
                hasPreviousPage: ( (countA - countB) > 0 ),
                hasNextPage: ( pagination&&pagination.first ? (countB > pagination.first) : false ),
                startCursor: (records.length > 0) ? edges[0].cursor : null,
                endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
              }
            } else {//backward
              pageInfo = {
                hasPreviousPage: ( pagination&&pagination.last ? (countB > pagination.last) : false ),
                hasNextPage: ( (countA - countB) > 0 ),
                startCursor: (records.length > 0) ? edges[0].cursor : null,
                endCursor: (records.length > 0) ? edges[edges.length - 1].cursor : null
              }
            }
            return {edges, pageInfo};

          }).catch(error =>{
            throw error;
          });
        }).catch(error =>{
          throw error;
        });
      }).catch(error =>{
        throw error;
      });

      <%}else{%>
        throw new Error('  <%=associations_temp[i].name%>ConnectionImpl is not implemented in the model');
      <%}-%>
    }

    countFiltered<%=associations_temp[i].name_cp%>Impl({search}){

      <%if(associations_temp[i].targetStorageType === 'sql'){-%>
          let options = {};
          if(search!== undefined){
            let arg = new searchArg(search);
            let arg_sequelize = arg.toSequelize();
            options['where'] = arg_sequelize;
          }
          return this.count<%- associations_temp[i].name_cp%>(options);
      <%}else{%>
        throw new Error('countFiltered<%=associations_temp[i].name_cp%>Impl is not implemented in the model');
      <%}-%>
    }
  <%}-%>

  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */

  static idAttribute() {
    return <%- name -%>.definition.id.name;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */

  static idAttributeType() {
    return <%- name -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- name -%>.
   *
   * @return {type} id value
   */

  getIdValue() {
    return this[<%- name -%>.idAttribute()]
  }

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

    base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
  <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  static externalIdsArray(){
    let externalIds = [];
    if(definition.externalIds){
      externalIds = definition.externalIds;
    }

    return externalIds;
  }

  static externalIdsObject(){
    return {
      <%for(let i=0; i < externalIds.length; i++){-%> <%=externalIds[i]-%>: '<%=attributes[ externalIds[i] ]-%>' <%if(i !== (externalIds.length -1) ){ -%>,<%}-%><%}-%>
    };
  }

}
