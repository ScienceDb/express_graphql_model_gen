'use strict';

const _ = require('lodash');
const Sequelize = require('sequelize');
const dict = require('../utils/graphql-sequelize-types');
const searchArg = require('../utils/search-argument');
const globals = require('../config/globals');
const validatorUtil = require('../utils/validatorUtil');
const fileTools = require('../utils/file-tools');
const helpersAcl = require('../utils/helpers-acl');
const email = require('../utils/email');
const fs = require('fs');
const path = require('path');
const os = require('os');
const uuidv4 = require('uuidv4');
const helper = require('../utils/helper');
const models = require(path.join(__dirname, '..', 'models_index.js'));
// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */

module.exports = class <%- name -%> extends Sequelize.Model{

  static init(sequelize, DataTypes){
    return super.init({
      <% let keys = Object.keys(attributes) -%>
      <%for (let i=0; i< keys.length; i++) {-%>
        <% let type_seq =  attributes[ keys[i] ] -%>
        <%=  keys[i] %>: {
            type: Sequelize[ dict['<%= type_seq %>'] ]
        }
        <%if(i !== (keys.length -1) ){ -%>,<%}-%>
      <%}-%>


    },{ <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>
      indexes: [<%- string_indices.join() -%> ], <%}-%>
      modelName: "<%- nameLc -%>",
      tableName: "<%-namePl-%>",
      sequelize
     } );
  }

  static associate(models){
    <% for(var key in associations){ -%>
      <%for(let i=0; i< associations[key].length; i++){-%>
        <%if(associations[key][i].targetStorageType === 'sql'){-%>
        <%- name -%>.<%= key %>(models.<%= associations[key][i].target_lc -%>
        <% if(key === 'belongsToMany'){ -%> ,{as: '<%= associations[key][i].name -%>',
        foreignKey:'<%= associations[key][i].sourceKey -%>',
        through : '<%= associations[key][i].keysIn -%>',
        onDelete: 'CASCADE'}  <%}else{ -%>
          ,{as: '<%= associations[key][i].name -%>', foreignKey:'<%= associations[key][i].targetKey -%>' }
          <%}-%>);
        <%}-%>
      <%}-%>
    <% } -%>
  }

  static readById( id ){
    return <%- name -%>.findOne({
        where: {
            id: id
        }
    });
  }

  static countRecords(search){
    let options = {};
    if (search !== undefined) {
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
    }
    return super.count(options);
  }

  static readAll(search, order, pagination){
    let options = {};
    if (search !== undefined) {
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
    }

    return super.count(options).then(items => {
        if (order !== undefined) {
            options['order'] = order.map((orderItem) => {
                return [orderItem.field, orderItem.order];
            });
        } else if (pagination !== undefined) {
            options['order'] = [
                ["id", "ASC"]
            ];
        }

        if (pagination !== undefined) {
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
        } else {
            options['offset'] = 0;
            options['limit'] = items;
        }

        if (globals.LIMIT_RECORDS < options['limit']) {
            throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }
        return super.findAll(options);
    });
  }

  static readAllCursor(search, order, pagination){
    let options = {};
    options['where'] = {};
    if(search !== undefined){
      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;
    }

    return super.count(options).then( items =>{
      options['offset'] = 0;
      options['order'] = [];

      if(order !== undefined){
        options['order'] = order.map( (orderItem)=>{
          return [orderItem.field, orderItem.order];
        });
      }

      if( !options['order'].map( orderItem=>{return orderItem[0] }).includes("id") ){
          options['order'] = [ ...options['order'], ...[ ["id", "ASC"] ]];
      }

      if(pagination!== undefined && pagination.cursor){
          let decoded_cursor = JSON.parse(this.base64Decode(pagination.cursor));
          options['where'] = {...options['where'], ...helper.parseOrderCursor(options['order'], decoded_cursor) } ;
      }

      options['limit'] = (pagination !== undefined && pagination.first!==undefined) ? pagination.first : items;

      if (globals.LIMIT_RECORDS < options['limit']) {
          throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
      }
      return super.findAll(options).then( records =>{
        let edges = records.map( record=>{ return {
          node: record,
          cursor: record.base64Enconde()
        }})
        let last = options.limit;
        delete options.limit;
        let pageInfo = {
          hasNextPage: super.count(options).then(num =>{return num > last}),
          endCursor: edges[ edges.length - 1 ].cursor
        }

        return {  edges, pageInfo };
      }).catch(error =>{
        console.log(error)
      });

    });
  }

  static addOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForCreate', this, input)
        .then((valSuccess) => {
            return super.create(input)
                .then(item => {
                  <%associations_temp = associations["hasMany"].concat(associations["belongsToMany"])-%>
                  <%for(let i=0; i < associations_temp.length; i++){-%>
                    <%if(associations_temp[i].targetStorageType === 'sql'){-%>
                      if(input.add<%=associations_temp[i].name_cp-%>){item.set<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>);}
                    <%}-%>
                    <%}-%>
                    return item;
                });
        }).catch((err) => {
            return err
        })
  }

  static deleteOne(id){
    return super.findByPk(id)
        .then(item => {

            if (item === null) return new Error(`Record with ID = ${id} not exist`);

            return validatorUtil.ifHasValidatorFunctionInvoke('validateForDelete', this, item)
                .then((valSuccess) => {
                    return item
                        .destroy()
                        .then(() => {
                            return 'Item successfully deleted';
                        });
                }).catch((err) => {
                    return err
                })
        });

  }

  static updateOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForUpdate', this, input)
        .then((valSuccess) => {
            return super.findByPk(input.id)
                .then(item => {
                  <%associations_temp = associations["hasMany"].concat(associations["belongsToMany"])-%>
                  <%for(let i=0; i < associations_temp.length; i++){-%>
                    <%if(associations_temp[i].targetStorageType === 'sql'){-%>
                      if(input.add<%=associations_temp[i].name_cp-%>){item.add<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>);}
                      if(input.remove<%=associations_temp[i].name_cp-%>){item.remove<%=associations_temp[i].name_cp-%>(input.remove<%=associations_temp[i].name_cp-%>);}
                    <%}-%>
                  <%}-%>
                    return item.update(input);
                });
        }).catch((err) => {
            return err
        })
  }

  static bulkAddCsv(context){

      let delim = context.request.body.delim;
      let cols = context.request.body.cols;
      let tmpFile = path.join(os.tmpdir(), uuidv4() + '.csv');

      context.request.files.csv_file.mv(tmpFile).then(() => {

          fileTools.parseCsvStream(tmpFile, this, delim, cols).then((addedZipFilePath) => {
              try {
                  console.log(`Sending ${addedZipFilePath} to the user.`);

                  let attach = [];
                  attach.push({
                      filename: path.basename("added_data.zip"),
                      path: addedZipFilePath
                  });

                  email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                      'ScienceDB batch add',
                      'Your data has been successfully added to the database.',
                      attach).then(function(info) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.log(info);
                  }).catch(function(err) {
                      fileTools.deleteIfExists(addedZipFilePath);
                      console.log(err);
                  });

              } catch (error) {
                  console.log(error.message);
              }

              fs.unlinkSync(tmpFile);
          }).catch((error) => {
              email.sendEmail(helpersAcl.getTokenFromContext(context).email,
                  'ScienceDB batch add', `${error.message}`).then(function(info) {
                  console.log(info);
              }).catch(function(err) {
                  console.log(err);
              });

              fs.unlinkSync(tmpFile);
          });

      }).catch((error) => {
          return new Error(error);
      });
  }

  static csvTableTemplate(){
    return helper.csvTableTemplate(<%- name -%>);
  }

  <%let associations_one = associations["belongsTo"]-%>
  <% for(let i=0; i < associations_one.length; i++){ -%>

  <%=associations_one[i].name%>Impl (search){
      if(search === undefined){
        return models.<%=associations_one[i].target_lc%>.readById(this.<%=associations_one[i].targetKey%>);
      }else{
        let id_search = {
            "field": "id",
            "value": {
              "value": this.<%=associations_one[i].targetKey%>
            },
            "operator": "eq"
        }

        let ext_search = {
          "operator": "and",
          "search": [id_search, search]
        }

        return models.<%=associations_one[i].target_lc%>.readAll(ext_search)
        .then( found =>{
            if(found){
              return found[0]
            }
            return found;
        });

      }
    }
  <%}-%>


  <%associations_one = associations["hasOne"]-%>
  <% for(let i=0; i < associations_one.length; i++){ -%>
    <%=associations_one[i].name%>Impl(search){

      let simple_search = {
        "field": "<%=associations_one[i].targetKey%>",
        "value": {
          "value": this.id
        },
        "operator": "eq"
      }

      let ext_search = simple_search;

      if(search !== undefined){
        ext_search = {
          "operator": "and",
          "search": [simple_search, search]
        }
      }

      return models.<%=associations_one[i].target_lc%>.readAll(ext_search)
      .then( found => { if(found){
        return found[0];
      }
        return found;
      })
    }
  <%}-%>

  <% associations_temp = associations["hasMany"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <%=associations_temp[i].name%>FilterImpl({search,order,pagination}){
      if(search === undefined)
      {
        return models.<%=associations_temp[i].target_lc%>.readAll({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"}, order, pagination);
      }else{
        return models.<%=associations_temp[i].target_lc%>.readAll({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }, order, pagination )
      }
    }

    countFiltered<%=associations_temp[i].name_cp%>Impl ({search}){

      if(search === undefined)
      {
        return models.<%=associations_temp[i].target_lc%>.countRecords({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} );
      }else{
        return models.<%=associations_temp[i].target_lc%>.countRecords({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] })
      }

    }

    <%=associations_temp[i].name%>ConnectionImpl({search,order,pagination}){
      if(search === undefined)
      {
        return models.<%=associations_temp[i].target_lc%>.readAllCursor({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"}, order, pagination);
      }else{
        return models.<%=associations_temp[i].target_lc%>.readAllCursor({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }, order, pagination )
      }
    }
  <%}-%>


  <% associations_temp = associations["belongsToMany"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    <%=associations_temp[i].name%>FilterImpl ({search,order,pagination}){

    <%if(associations_temp[i].targetStorageType === 'sql'){-%>
        let options = {};

        if(search!== undefined){
          let arg = new searchArg(search);
          let arg_sequelize = arg.toSequelize();
          options['where'] = arg_sequelize;
        }

        return this.count<%- associations_temp[i].name_cp%>(options).then( items => {
          if(order !== undefined){
            options['order'] = order.map( (orderItem) => {return [ orderItem.field, orderItem.order]; } );
          }else if(pagination !== undefined){
            options['order'] = [ ["id", "ASC"] ];
          }
          if(pagination !== undefined){
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
          }else{
            options['offset'] = 0;
            options['limit'] = items;
          }
          if(globals.LIMIT_RECORDS < options['limit']){
            throw new Error(`Request of total <%=associations_temp[i].name_lc%>Filter exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
          }
          return this.get<%- associations_temp[i].name_cp%>(options);
        });
      <%}else{%>
        throw new Error('  <%=associations_temp[i].name%>FilterImpl is not implemented in the model');
      <%}-%>
    }


    <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}){

    <%if(associations_temp[i].targetStorageType === 'sql'){-%>

      let options = {};
      options['where'] = {};

      if (search !== undefined) {
          let arg = new searchArg(search);
          let arg_sequelize = arg.toSequelize();
          options['where'] = arg_sequelize;
      }

      return this.count<%- associations_temp[i].name_cp%>(options).then(items => {

        options['offset'] = 0;
        options['order'] = [];

          if (order !== undefined) {
              options['order'] = order.map((orderItem) => {
                  return [orderItem.field, orderItem.order];
              });
          }

          if( !options['order'].map( orderItem=>{return orderItem[0] }).includes("id") ){
              options['order'] = [ ...options['order'], ...[ ["id", "ASC"] ]];
          }

          if (pagination !== undefined && pagination.cursor) {

              let decoded_cursor = JSON.parse(this.base64Decode(pagination.cursor));
              options['where'] = {...options['where'], ...helper.parseOrderCursor(options['order'], decoded_cursor) } ;
          }

          options['limit'] = (pagination !== undefined && pagination.first!==undefined) ? pagination.first : items;

          if (globals.LIMIT_RECORDS < options['limit']) {
              throw new Error(`Request of total <%=associations_temp[i].name_lc%>Connection exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
          }
          return this.get<%- associations_temp[i].name_cp%>(options).then( records =>{
            let edges = [];
            let pageInfo = {
              hasNextPage: false,
              endCursor: null
            }

            if(records){
             edges = records.map(record=>{ return {
                node: record,
                cursor: record.base64Enconde()
              }});
              let last = options.limit;
              delete options.limit;
              delete options.order;
               pageInfo = {
                hasNextPage: this.count<%- associations_temp[i].name_cp%>(options).then(num =>{return num > last}),
                endCursor:  edges[edges.length - 1].cursor
              }
            }
              return {edges, pageInfo};
          }).catch(error =>{
            throw error;
          });
      });


      <%}else{%>
        throw new Error('  <%=associations_temp[i].name%>ConnectionImpl is not implemented in the model');
      <%}-%>
    }

    countFiltered<%=associations_temp[i].name_cp%>Impl({search}){

      <%if(associations_temp[i].targetStorageType === 'sql'){-%>
          let options = {};
          if(search!== undefined){
            let arg = new searchArg(search);
            let arg_sequelize = arg.toSequelize();
            options['where'] = arg_sequelize;
          }
          return this.count<%- associations_temp[i].name_cp%>(options);
      <%}else{%>
        throw new Error('countFiltered<%=associations_temp[i].name_cp%>Impl is not implemented in the model');
      <%}-%>
    }
  <%}-%>


  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }


  base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
    attributes.push('id');
    let data_values = _.pick(this, attributes);
    return data_values;
  }

}
