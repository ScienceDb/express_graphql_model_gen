'use strict';

const _ = require('lodash');
const Sequelize = require('sequelize');
const dict = require('../utils/graphql-sequelize-types');
const searchArg = require('../utils/search-argument');
const globals = require('../config/globals');
const validatorUtil = require('../utils/validatorUtil');

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */

module.exports = class <%- name -%> extends Sequelize.Model{

  static init(sequelize, DataTypes){
    return super.init({
      <% let keys = Object.keys(attributes) -%>
      <%for (let i=0; i< keys.length; i++) {-%>
        <% let type_seq =  attributes[ keys[i] ] -%>
        <%=  keys[i] %>: {
            type: Sequelize[ dict['<%= type_seq %>'] ]
        }
        <%if(i !== (keys.length -1) ){ -%>,<%}-%>
      <%}-%>


    },{ <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>
      indexes: [<%- string_indices.join() -%> ], <%}-%>
      modelName: "<%- nameLc -%>",
      tableName: "<%-namePl-%>",
      sequelize
     } );
  }

  static associate(models){
    <% for(var key in associations){ -%>
      <%for(let i=0; i< associations[key].length; i++){-%>
        <%if(associations[key][i].targetStorageType === 'sql'){-%>
        <%- name -%>.<%= key %>(models.<%= associations[key][i].target_lc -%>
        <% if(key === 'belongsToMany'){ -%> ,{as: '<%= associations[key][i].name -%>',
        foreignKey:'<%= associations[key][i].sourceKey -%>',
        through : '<%= associations[key][i].keysIn -%>',
        onDelete: 'CASCADE'}  <%}else{ -%>
          ,{as: '<%= associations[key][i].name -%>', foreignKey:'<%= associations[key][i].targetKey -%>' }
          <%}-%>);
        <%}-%>
      <%}-%>
    <% } -%>
  }

  static readById( id ){
    return <%- name -%>.findOne({
        where: {
            id: id
        }
    });
  }

  static countRecords(search){
    let options = {};
    if (search !== undefined) {
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
    }
    return super.count(options);
  }

  static readAll(search, order, pagination){
    let options = {};
    if (search !== undefined) {
        let arg = new searchArg(search);
        let arg_sequelize = arg.toSequelize();
        options['where'] = arg_sequelize;
    }

    return super.count(options).then(items => {
        if (order !== undefined) {
            options['order'] = order.map((orderItem) => {
                return [orderItem.field, orderItem.order];
            });
        } else if (pagination !== undefined) {
            options['order'] = [
                ["id", "ASC"]
            ];
        }

        if (pagination !== undefined) {
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
        } else {
            options['offset'] = 0;
            options['limit'] = items;
        }

        if (globals.LIMIT_RECORDS < options['limit']) {
            throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
        }
        return super.findAll(options);
    });
  }

  static addOne(input){
    return validatorUtil.ifHasValidatorFunctionInvoke('validateForCreate', this, input)
        .then((valSuccess) => {
            return super.create(input)
                .then(item => {
                  <%associations_temp = associations["hasMany"].concat(associations["belongsToMany"])-%>
                  <%for(let i=0; i < associations_temp.length; i++){-%>
                    <%if(associations_temp[i].targetStorageType === 'sql'){-%>
                      if(input.add<%=associations_temp[i].name_cp-%>){super.set<%=associations_temp[i].name_cp-%>(input.add<%=associations_temp[i].name_cp-%>);}
                    <%}-%>
                    <%}-%>
                    return item;
                });
        }).catch((err) => {
            return err
        })
  }

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }


  base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
    attributes.push('id');
    let data_values = _.pick(this, attributes);
    return data_values;
  }

}
