'use strict';

const Sequelize = require('sequelize');
const dict = require('../utils/graphql-sequelize-types');

/**
 * module - Creates a sequelize model
 *
 * @param  {object} sequelize Sequelize instance.
 * @param  {object} DataTypes Allowed sequelize data types.
 * @return {object}           Sequelize model with associations defined
 */
module.exports = function(sequelize, DataTypes){
  var <%- name -%> = sequelize.define('<%- nameLc -%>',{

    <% let keys = Object.keys(attributes) -%>
    <%for (let i=0; i< keys.length; i++) {-%>
      <% let type_seq =  attributes[ keys[i] ] -%>
      <%=  keys[i] %>: {
          type: Sequelize[ dict['<%= type_seq %>'] ]
      }
      <%if(i !== (keys.length -1) ){ -%>,<%}-%>
    <%}-%>


  } <%if(indices !== undefined){let string_indices = indices.map(x => { return "'" + x + "'" }) -%>,{
    indexes: [<%- string_indices.join() -%> ]
  } <%}-%>
  );




  <%- name -%>.associate = function(models){

    <% for(var key in associations){ -%>
      <%for(let i=0; i< associations[key].length; i++){-%>
        <%if(associations[key][i].targetStorageType === 'sql'){-%>
        <%- name -%>.<%= key %>(models.<%= associations[key][i].target_lc -%>
        <% if(key === 'belongsToMany'){ -%> ,{as: '<%= associations[key][i].name -%>',
        foreignKey:'<%= associations[key][i].sourceKey -%>',
        through : '<%= associations[key][i].keysIn -%>',
        onDelete: 'CASCADE'}  <%}else{ -%>
          ,{as: '<%= associations[key][i].name -%>', foreignKey:'<%= associations[key][i].targetKey -%>' }
          <%}-%>);
        <%}-%>
      <%}-%>
    <% } -%>
  };

  return <%- name -%>;
};
