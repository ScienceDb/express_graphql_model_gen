/*
    Resolvers for basic CRUD operations
*/

const path = require('path');
const <%-  nameLc  -%> = require(path.join(__dirname, '..', 'models_index.js')).<%- nameLc -%>;
const helper = require('../utils/helper');
const checkAuthorization = require('../utils/check-authorization');
const fs = require('fs');
const {handleError} = require('../utils/errors');
const os = require('os');
const resolvers = require(path.join(__dirname,'index.js'));
const models = require(path.join(__dirname, '..', 'models_index.js'));
const globals = require('../config/globals');

<% associations_temp = associationsArguments["to_one"].concat(associationsArguments["to_many"]).concat(associationsArguments["to_many_through_sql_cross_table"])-%>
const associationArgsDef = {
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <%if( i == associations_temp.length - 1 ){-%>
      'add<%=associations_temp[i].name_cp-%>': '<%=associations_temp[i].target_lc-%>'
    <%}else {-%>
      'add<%=associations_temp[i].name_cp-%>': '<%=associations_temp[i].target_lc-%>',
    <%}-%>
  <%}-%>
}

<%let associations_one = associationsArguments["to_one"]-%>
<% for(let i=0; i < associations_one.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_one[i].name%> - Return associated record
   *
   * @param  {object} search       Search argument to match the associated record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_one[i].name%> = async function({search}, context){
    <% if (associations_one[i].holdsForeignKey) { %>
    if(helper.isNotUndefinedAndNotNull(this.<%=associations_one[i].targetKey%>)){
      try{
        if (search === undefined) {
          return resolvers.readOne<%=associations_one[i].target_cp%>({[models.<%=associations_one[i].target_lc-%>.idAttribute()]: this.<%=associations_one[i].targetKey%>},context)
        } else {
          //build new search filter
          let nsearch = helper.addSearchField({
            "search": search,
            "field": models.<%=associations_one[i].target_lc-%>.idAttribute(),
            "value": {"value": this.<%= associations_one[i].targetKey -%> },
            "operator": "eq"
          });
          let found = await resolvers.<%=associations_one[i].target_lc_pl%>Connection({search: nsearch}, context);
          if (found) {
            return found[0]
          }
          return found;
        }
      }catch(error){
        handleError(error);
      };
    }
    <%}else{-%>
      try{
        //build new search filter
        let nsearch = helper.addSearchField({
          "search": search, 
          "field": "<%=associations_one[i].targetKey%>", 
          "value": {"value": this.getIdValue()}, 
          "operator": "eq"
        });

        let found = (await resolvers.<%=associations_one[i].target_lc_pl%>Connection({search: nsearch}, context)).edges;

        if(found.length > 0) {
          if(found.length > 1){
            let foundIds = [];
            found.forEach(<%=associations_one[i].target_lc%> => {foundIds.push(<%=associations_one[i].target_lc%>.node.getIdValue())})
            context.benignErrors.push(new Error(
              `Not unique "to_one" association Error: Found ${found.length} <%=associations_one[i].target_lc_pl%> matching <%- nameLc -%> with <%- idAttribute-%> ${this.getIdValue()}. Consider making this association a "to_many", using unique constraints, or moving the foreign key into the <%- name -%> model. Returning first <%=associations_one[i].target-%>. Found <%=associations_one[i].target_pl-%> ${models.<%=associations_one[i].target_lc-%>.idAttribute()}s: [${foundIds.toString()}]`
            ));
          }
          return found[0].node;
        }
        return null;
      }catch(error){
        handleError(error);
      };
    <%}-%>
  }
<%}-%>

<% associations_temp = associationsArguments["to_many"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

   /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
   <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){
    try{

      //build new search filter
      let nsearch = helper.addSearchField({
        "search": search,
        "field": "<%=associations_temp[i].targetKey%>",
        "value": {"value": this.getIdValue()},
        "operator": "eq"
      });

      return resolvers.count<%=associations_temp[i].target_cp_pl%>({search: nsearch},context);
    }catch(error){
      handleError(error);
    };
  }


  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Connection - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Cursor and first(indicatig the number of records to retrieve) arguments to apply cursor-based pagination.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records as grapqhql connections holding conditions specified by search, order and pagination argument
   */
   <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Connection = function({search,order,pagination}, context){
    try{

      //build new search filter
      let nsearch = helper.addSearchField({
        "search": search,
        "field": "<%=associations_temp[i].targetKey%>",
        "value": {"value": this.getIdValue()},
        "operator": "eq"
      });

      return resolvers.<%=associations_temp[i].target_lc_pl%>Connection({search: nsearch,order: order,pagination: pagination},context);
    }catch(error){
      handleError(error);
    };
  }
<%}-%>

<%#
/**
 * Mutation resolvers for associations fields.
 *
 * These resolvers are implemented by extended the model's protoype
 * with methods to resolve each association related field.
 *
 * Methods:
 * model.prototype.handleAssociations()
 * model.prototype.addAssoc()
 * model.prototype.removeAssoc()
 */
-%>
<%- include('./includes/handleAssociations'); -%>
<%- include('./includes/create-resolvers-fieldMutations', {op: "add"}); -%>
<%- include('./includes/create-resolvers-fieldMutations', {op: "remove"}); -%>

<%#
/**
 * Local helper fuctions.
 *
 * Functions:
 * errorMessageForRecordsLimit()
 * checkCount()
 * checkCountForOne()
 * checkCountAgainAndAdaptLimit()
 * countAllAssociatedRecords()
 * validForDeletion()
 */
-%>
<%- include('./includes/record-limit-helpers'); -%>
/**
 * countAllAssociatedRecords - Count records associated with another given record
 *
 * @param  {ID} id      Id of the record which the associations will be counted
 * @param  {objec} context Default context by resolver
 * @return {Int}         Number of associated records
 */
  async function countAllAssociatedRecords(id, context ){

  let <%- nameLc %> = await resolvers.readOne<%- nameCp -%>({<%- idAttribute-%>: id}, context);
  //check that record actually exists
  if (<%- nameLc %> === null) throw new Error(`Record with ID = ${id} does not exist`);
  let promises_to_many = [];
  let promises_to_one = [];

  <%# check associations to_one and to_many are counted in diferent variable -%>
  <%associations_temp = associationsArguments["to_many"] -%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    promises_to_many.push(<%- nameLc %>.countFiltered<%=associations_temp[i].name_cp%>({}, context) );
  <%}-%>
  <%associations_temp = associationsArguments["to_one"] -%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    promises_to_one.push(<%- nameLc %>.<%=associations_temp[i].name%>({}, context) );
  <%}-%>

  let result_to_many = await Promise.all(promises_to_many);
  let result_to_one = await Promise.all(promises_to_one);

  let get_to_many_associated = result_to_many.reduce( (accumulator, current_val )=> accumulator + current_val ,  0 );
  let get_to_one_associated = result_to_one.filter( (r, index) => helper.isNotUndefinedAndNotNull(r) ).length;

  return get_to_one_associated + get_to_many_associated;
}

/**
 * validForDeletion - Checks wether a record is allowed to be deleted
 *
 * @param  {ID} id      Id of record to check if it can be deleted
 * @param  {object} context Default context by resolver
 * @return {boolean}         True if it is allowed to be deleted and false otherwise
 */
  async function validForDeletion(id, context){
  if( await countAllAssociatedRecords(id, context) > 0 ){
    throw new Error(`<%- name %> with <%- idAttribute -%> ${id} has associated records and is NOT valid for deletion. Please clean up before you delete.`);
  }

  if (context.benignErrors.length > 0) {
    throw new Error('Errors occurred when counting associated records. No deletion permitted for reasons of security.');
  }

  return true;
}

module.exports = {

  /**
   * <%- namePl -%>Connection - Check user authorization and return certain number, specified in pagination argument, of records that
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Cursor and first(indicatig the number of records to retrieve) arguments to apply cursor-based pagination.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records as grapqhql connections holding conditions specified by search, order and pagination argument
   */
  <%- namePl -%>Connection: async function({search, order, pagination}, context){
    //check: adapters
    let registeredAdapters = Object.values(<%- nameLc _%>.registeredAdapters);
    if(registeredAdapters.length === 0) {
      throw new Error('No adapters registered for data model "<%- name %>"');
    }//else

    try {
      //exclude adapters
      let adapters = helper.removeExcludedAdapters(search, registeredAdapters);
      if(adapters.length === 0) {
        throw new Error('All adapters was excluded for data model "<%- name %>"');
      }//else

      //check: auth adapters
      let authorizationCheck = await helper.authorizedAdapters(context, adapters, 'read');
      if (authorizationCheck.authorizedAdapters.length > 0) {
        let connectionObj = await <%- nameLc _%>.readAllCursor(search, order, pagination, authorizationCheck.authorizedAdapters);
        //check adapter authorization Errors
        if (authorizationCheck.authorizationErrors.length > 0) {
          context.benignErrors = context.benignErrors.concat(authorizationCheck.authorizationErrors);
        }
        //check Errors returned by the model layer (time-outs, unreachable, etc...)
        if ( connectionObj.errors !== undefined && Array.isArray(connectionObj.errors) && connectionObj.errors.length > 0 ) {
          context.benignErrors = context.benignErrors.concat(connectionObj.errors)
          delete connectionObj['errors']
        }
        return connectionObj;
      } else { //adapters not auth || errors
          // else new Error
          if (authorizationCheck.authorizationErrors.length > 0) {
              throw new Error(authorizationCheck.authorizationErrors.reduce((a, c) => `${a}, ${c.message}`));
          } else {
              throw new Error('No available adapters for data model "<%- name %>" ');
          }
      }
    } catch (error) {
        handleError(error);
    }
  },


  /**
   * readOne<%- nameCp -%> - Check user authorization and return one record with the specified <%- idAttribute -%> in the <%- idAttribute -%> argument.
   *
   * @param  {number} {<%- idAttribute -%>}    <%- idAttribute -%> of the record to retrieve
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Record with <%- idAttribute -%> requested
   */
  readOne<%- nameCp -%>: async function({<%- idAttribute -%> }, context){
    //check: adapters auth
    try {
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(<%- idAttribute _%>), 'read');
      if (authorizationCheck === true) {
        return <%- nameLc _%>.readById(<%- idAttribute _%>);
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
    } catch (error) {
      handleError(error);
    }
  },

  /**
   * add<%- nameCp -%> - Check user authorization and creates a new record with data specified in the input argument
   *
   * @param  {object} input   Info of each field to create the new record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         New record created
   */
  add<%- nameCp -%>: async function(input, context){
    //check: input has idAttribute
    if (! input.<%- idAttribute _%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute _%>'.`);
    }

    //check: adapters auth
    try {
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(input.<%- idAttribute _%>), 'create');
      if (authorizationCheck === true) {
        let inputSanitized = helper.sanitizeAssociationArguments(input, [Object.keys(associationArgsDef)]);
         await helper.checkAuthorizationOnAssocArgs(inputSanitized, context, associationArgsDef,['read', 'update'], models);
         await helper.checkAndAdjustRecordLimitForCreateUpdate(inputSanitized, context, associationArgsDef);
         if(!input.skipAssociationsExistenceChecks) {
           await helper.validateAssociationArgsExistence(inputSanitized, context, associationArgsDef);
         }
          let createdRecord = await <%- nameLc _%>.addOne(inputSanitized);
          await createdRecord.handleAssociations(inputSanitized, context);
          return createdRecord;
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
    } catch (error) {
      handleError(error);
    }
  },


  /**
   * bulkAdd<%- nameCp -%>Csv - Load csv file of records
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Csv: function(_, context) {
    return checkAuthorization(context, '<%- name -%>', 'create').then(authorization => {
      if (authorization === true) {
        return <%- nameLc -%>.bulkAddCsv(context);
      } else {
          throw new Error("You don't have authorization to perform this action");
      }
    }).catch(error => {
      handleError( error);
    })
  },

  /**
   * delete<%- nameCp -%> - Check user authorization and delete a record with the specified <%- idAttribute -%> in the <%- idAttribute -%> argument.
   *
   * @param  {number} {<%- idAttribute -%>}    <%- idAttribute -%> of the record to delete
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {string}         Message indicating if deletion was successfull.
   */
  delete<%- nameCp -%>: async function({<%- idAttribute -%>}, context){
    //check: adapters auth
    try {
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(<%- idAttribute _%>), 'delete');
      if (authorizationCheck === true) {
        if(await validForDeletion(<%- idAttribute -%>, context) ){
          return <%- nameLc _%>.deleteOne(<%- idAttribute _%>);
        }
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
    } catch (error) {
      handleError(error);
    }
  },

  /**
   * update<%- nameCp-%> - Check user authorization and update the record specified in the input argument
   *
   * @param  {object} input   record to update and new info to update
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Updated record
   */
  update<%- nameCp-%>: async function(input, context){
    //check: input has idAttribute
    if (! input.<%- idAttribute _%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute _%>'.`);
    }

    //check: adapters auth
    try {
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(input.<%- idAttribute _%>), 'update');
      if (authorizationCheck === true) {
        let inputSanitized = helper.sanitizeAssociationArguments(input, [Object.keys(associationArgsDef)]);
         await helper.checkAuthorizationOnAssocArgs(inputSanitized, context, associationArgsDef,['read', 'update'], models);
         await helper.checkAndAdjustRecordLimitForCreateUpdate(inputSanitized, context, associationArgsDef);
         if(!input.skipAssociationsExistenceChecks) {
           await helper.validateAssociationArgsExistence(inputSanitized, context, associationArgsDef);
         }
         let updatedRecord = await <%- nameLc _%>.updateOne(inputSanitized);
         await updatedRecord.handleAssociations(inputSanitized, context);
         return updatedRecord;
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
    } catch (error) {
      handleError(error);
    }
  },

  /**
   * count<%-namePlCp-%> - Counts number of records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} Search argument for filtering records
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {number}          Number of records that holds the conditions specified in the search argument
   */

  count<%-namePlCp-%>: async function({search}, context){
    //check: adapters
    let registeredAdapters = Object.values(<%- nameLc _%>.registeredAdapters);
    if(registeredAdapters.length === 0) {
      throw new Error('No adapters registered for data model "<%- name %>"');
    }//else

    try {
      //exclude adapters
      let adapters = helper.removeExcludedAdapters(search, registeredAdapters);
      if(adapters.length === 0) {
        throw new Error('All adapters was excluded for data model "<%- name %>"');
      }//else

      //check: auth adapters
      let authorizationCheck = await helper.authorizedAdapters(context, adapters, 'read');
      if (authorizationCheck.authorizedAdapters.length > 0) {

        let countObj = await <%- nameLc -%>.countRecords(search, authorizationCheck.authorizedAdapters);
        //check adapter authorization Errors
        if (authorizationCheck.authorizationErrors.length > 0) {
          context.benignErrors = context.benignErrors.concat(authorizationCheck.authorizationErrors);
        }
        //check Errors returned by the model layer (time-outs, unreachable, etc...)
        if ( countObj.errors !== undefined && Array.isArray(countObj.errors) && countObj.errors.length > 0 ) {
          context.benignErrors = context.benignErrors.concat(countObj.errors)
          delete countObj['errors']
        }
        return countObj.sum;
      } else { //adapters not auth || errors
          // else new Error
          if (authorizationCheck.authorizationErrors.length > 0) {
              throw new Error(authorizationCheck.authorizationErrors.reduce((a, c) => `${a}, ${c.message}`));
          } else {
              throw new Error('No available adapters for data model "<%- name %>"');
          }
      }
    } catch (error) {
        handleError(error);
    }
  },

  /**
   * csvTableTemplate<%- nameCp-%> - Returns table's template
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {Array}         Strings, one for header and one columns types
   */
  csvTableTemplate<%- nameCp-%>: function(_, context){
    return checkAuthorization(context, '<%- name -%>', 'read').then(authorization => {
        if (authorization === true) {
            return <%- nameLc -%>.csvTableTemplate();
        } else {
            throw new Error("You don't have authorization to perform this action");
        }
    }).catch(error => {
        handleError(error);
    })
  }

}
