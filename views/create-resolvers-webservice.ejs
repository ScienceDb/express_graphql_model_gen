const <%-nameLc-%> =  require('../models-webservice/<%-nameLc-%>');
const searchArg = require('../utils/search-argument');
const resolvers = require('./index');

<% associations_temp = associations.explicit_resolvers["belongsTo"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%> = function(_, context){
    return resolvers.readOne<%=associations_temp[i].target_cp%>({"id" : this.<%=associations_temp[i].targetKey%>},context);
  }
<%}-%>

<% associations_temp = associations.explicit_resolvers["hasOne"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%> = function(_, context){
    return resolvers.<%=associations_temp[i].target_lc_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq" } },context)
    .then((res)=>{
      return res[0];
    }).catch( error => {
      throw new Error(error);
    });
  }
<%}-%>

<% associations_temp = associations.explicit_resolvers["hasMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter = function({search,order, pagination}, context){
    if(search === undefined)
    {
      return resolvers.<%=associations_temp[i].target_lc_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"}, order, pagination},context);
    }else{
      return resolvers.<%=associations_temp[i].target_lc_pl%>({"search":{"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }, order, pagination },context)
    }

  }

  <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){

    if(search === undefined)
    {
      return resolvers.count<%=associations_temp[i].target_cp_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} }, context);
    }else{
      return resolvers.count<%=associations_temp[i].target_cp_pl%>({"search":{"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }},context)
    }

  }
<%}-%>



module.exports = {
  <%- namePl -%>: function({search,order,pagination}, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('<%- namePl -%> is not implemented');
  },

  readOne<%- nameCp -%>: function({id}, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('readOne<%- nameCp -%> is not implemented');
  },

  count<%- namePlCp -%>: function({search},context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('count<%- namePlCp -%> is not implemented');
  }
}
