const <%-nameLc-%> =  require('../models-webservice/<%-nameLc-%>');
const searchArg = require('../utils/search-argument');
const resolvers = require('./index');


<% associations_temp = associations["belongsToMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of associated records holding conditions specified by search, order and pagination argument
   */

   <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter = function({search,order, pagination}, context){

     /*
     YOUR CODE GOES HERE
     */
     throw new Error('<%=associations_temp[i].name_lc%>Filter is not implemented');
   }

   /**
    * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
    *
    * @param  {object} {search} description
    * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
    * @return {type}          Number of associated records that holds the conditions specified in the search argument
    */
   <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){
     /*
     YOUR CODE GOES HERE
     */
     throw new Error('countFiltered<%=associations_temp[i].name_cp%> is not implemented');
   }

<%}-%>

<% associations_temp = associations["hasMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of associated records holding conditions specified by search, order and pagination argument
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter = function({search,order, pagination}, context){
    if(search === undefined)
    {
      return resolvers.<%=associations_temp[i].target_lc_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"}, order, pagination},context);
    }else{
      return resolvers.<%=associations_temp[i].target_lc_pl%>({"search":{"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }, order, pagination },context)
    }

  }

  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){

    if(search === undefined)
    {
      return resolvers.count<%=associations_temp[i].target_cp_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} }, context);
    }else{
      return resolvers.count<%=associations_temp[i].target_cp_pl%>({"search":{"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }},context)
    }

  }
<%}-%>


<% associations_temp = associations["belongsTo"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%> - Return associated record
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%> = function(_, context){
    return resolvers.readOne<%=associations_temp[i].target_cp%>({"id" : this.<%=associations_temp[i].targetKey%>},context);
  }
<%}-%>

<% associations_temp = associations["hasOne"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%> - Return associated record
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%> = function(_, context){
    return resolvers.<%=associations_temp[i].target_lc_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq" } },context)
    .then((res)=>{
      return res[0];
    }).catch( error => {
      throw new Error(error);
    });
  }
<%}-%>





module.exports = {

  /**
   * <%- namePl -%> - Returns certain number, specified in pagination argument, of records that
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records holding conditions specified by search, order and pagination argument
   */
  <%- namePl -%>: function({search,order,pagination}, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('<%- namePl -%> is not implemented');
  },

  /**
   * readOne<%- nameCp -%> - Returns one record with the specified id in the id argument.
   *
   * @param  {number} {id}    Id of the record to retrieve
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Record with id requested
   */
  readOne<%- nameCp -%>: function({id}, context){
    return <%-nameLc-%>.readById(id );
  },

  /**
   * add<%- nameCp -%> - Creates a new record with data specified in the input argument
   *
   * @param  {object} input   Info of each field to create the new record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         New record created
   */
  add<%- nameCp -%>: function(input, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('add<%- nameCp -%> is not implemented');
  },

  /**
   * bulkAdd<%- nameCp -%>Xlsx - Load xlsx file of records NO STREAM
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Xlsx: function(_, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('bulkAdd<%- nameCp -%>Xlsx is not implemented');
  },

  /**
   * bulkAdd<%- nameCp -%>Csv - Load csv file of records
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Csv: function(_, context) {
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('bulkAdd<%- nameCp -%>Csv is not implemented');
  },

  /**
   * delete<%- nameCp -%> - Deletes a record with the specified id in the id argument.
   *
   * @param  {number} {id}    Id of the record to delete
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {string}         Message indicating if deletion was successfull.
   */
  delete<%- nameCp -%>: function({id}, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('delete<%- nameCp -%> is not implemented');
  },

  /**
   * update<%- nameCp-%> - Updates the record specified in the input argument
   *
   * @param  {object} input   record to update and new info to update
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Updated record
   */
  update<%- nameCp-%>: function(input, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('update<%- nameCp-%> is not implemented');
  },

  /**
   * count<%-namePlCp-%> - Counts the number of records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} Search argument for filtering records
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {number}          Number of records that holds the conditions specified in the search argument
   */
  count<%- namePlCp -%>: function({search},context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('count<%- namePlCp -%> is not implemented');
  },

  /**
   * vueTable<%- nameCp-%> - Returns table of records as needed for displaying a vuejs table
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Records with format as needed for displaying a vuejs table
   */
  vueTable<%- nameCp-%>: function(_,context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('vueTable<%- nameCp-%> is not implemented');
  },

  /**
   * csvTableTemplate<%- nameCp-%> - Returns table's template
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {Array}         Strings, one for header and one columns types
   */
  csvTableTemplate<%- nameCp-%>: function(_, context){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('csvTableTemplate<%- nameCp-%> is not implemented');
  }
}
