/*
    Resolvers for basic CRUD operations
*/

const <%-  nameLc  -%> = require('../models/index').<%- nameLc -%>;
const searchArg = require('../utils/search-argument');
const fileTools =  require('../utils/file-tools');
const helper = require('../utils/helper');
const globals = require('../config/globals');
const checkAuthorization = require('../utils/check-authorization');
const path = require('path')
const fs = require('fs')
const uuidv4 = require('uuidv4')
<%for(let type in associations.explicit_resolvers){-%>
  <%for(let i=0; i < associations.explicit_resolvers[type].length; i++){-%>
    const <%=associations.explicit_resolvers[type][i].target_lc-%> = require('./<%=associations.explicit_resolvers[type][i].target_lc-%>');
  <%}-%>
<%}-%>

<%let associations_one = associations.implicit_associations["hasOne"].concat(associations.implicit_associations["belongsTo"])-%>
<% for(let i=0; i < associations_one.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_one[i].name_lc%> - Return associated record
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_one[i].name_lc%> = function(_, context){
    return this.get<%- associations_one[i].name_cp%>();
  }
<%}-%>

<% let associations_temp = associations.implicit_associations["hasMany"].concat(associations.implicit_associations["belongsToMany"])-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of associated records holding conditions specified by search, order and pagination argument
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter = function({search,order,pagination}, context){

    let options = {};

    if(search!== undefined){
      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;
    }

    return this.count<%- associations_temp[i].target_cp_pl%>(options).then( items => {
      if(order !== undefined){
        options['order'] = order.map( (orderItem) => {return [ orderItem.field, orderItem.order]; } );
      }

      if(pagination !== undefined){
        options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
        options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
      }else{
        options['offset'] = 0;
        options['limit'] = items;
      }

      if(globals.LIMIT_RECORDS < options['limit']){
        throw new Error(`Request of total <%=associations_temp[i].name_lc%>Filter exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
      }
      return this.get<%- associations_temp[i].name_cp%>(options);
    }).catch(error =>{
      console.log("Catched the error in <%=associations_temp[i].name_lc%>Filter ", error);
      return error;
    });
  }

  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){

    let options = {};

    if(search!== undefined){
      let arg = new searchArg(search);
      let arg_sequelize = arg.toSequelize();
      options['where'] = arg_sequelize;
    }

    return this.count<%- associations_temp[i].name_cp%>(options);
  }

<%}-%>
<% associations_temp = associations.explicit_resolvers["belongsTo"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%> - Return associated record
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%> = function(_, context){
    return <%=associations_temp[i].target_lc%>.readOne<%=associations_temp[i].target_cp%>({"id" : this.<%=associations_temp[i].targetKey%>}, context);
  }
<%}-%>

<% associations_temp = associations.explicit_resolvers["hasOne"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%> - Return associated record
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%> = function(_, context){
    return <%=associations_temp[i].target_lc%>.<%=associations_temp[i].target_pl%>({"search": {"field" : <%=associations_temp[i].targetKey%>, "value":{"value":this.id }, "operator": "eq"} }, context);
  }
<%}-%>

<% associations_temp = associations.explicit_resolvers["hasMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of associated records holding conditions specified by search, order and pagination argument
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name_lc%>Filter = function({search,order, pagination}, context){

    if(search === undefined)
    {
      return <%=associations_temp[i].target_lc%>.<%=associations_temp[i].target_pl%>({"search":{"field" : <%=associations_temp[i].targetKey%>, "value":{"value":this.id }, "operator": "eq"}, order, pagination }, context);
    }else{
      return <%=associations_temp[i].target_lc%>.<%=associations_temp[i].target_pl%>({"search":{"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }, order, pagination },context)
    }

  }

  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){

    if(search === undefined)
    {
      return <%=associations_temp[i].target_lc%>.count<%=associations_temp[i].target_cp_pl%>({"search":{"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} }, context);
    }else{
      return <%=associations_temp[i].target_lc()%>.count<%=associations_temp[i].target_cp_pl%>>({"search":{"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }},context)
    }

  }
<%}-%>

module.exports = {

  /**
   * <%- namePl -%> - Check user authorization and return certain number, specified in pagination argument, of records that
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records holding conditions specified by search, order and pagination argument
   */
  <%- namePl -%>: function({search, order, pagination}, context){
    return checkAuthorization(context, '<%- namePl -%>', 'read').then( authorization =>{
        if (authorization === true) {
        let options = {};
        if(search!== undefined){
          let arg = new searchArg(search);
          let arg_sequelize = arg.toSequelize();
          options['where'] = arg_sequelize;
        }

        return <%- nameLc -%>.count(options).then( items => {
          if(order !== undefined){
            options['order'] = order.map( (orderItem) => {return [ orderItem.field, orderItem.order]; } );
          }

          if(pagination !== undefined){
            options['offset'] = pagination.offset === undefined ? 0 : pagination.offset;
            options['limit'] = pagination.limit === undefined ? (items - options['offset']) : pagination.limit;
          }else{
            options['offset'] = 0;
            options['limit'] = items;
          }

          if(globals.LIMIT_RECORDS < options['limit']){
            throw new Error(`Request of total <%- namePl -%> exceeds max limit of ${globals.LIMIT_RECORDS}. Please use pagination.`);
          }
          return <%- nameLc -%>.findAll(options);
        }).catch(error =>{
          console.log("Catched the error in <%- namePl -%> ", error);
          return error;
        });
      } else {
          return new Error("You don't have authorization to perform this action");
      }
    }).catch( error =>{
        return error;
    })
  },

  /**
   * readOne<%- nameCp -%> - Check user authorization and return one book with the specified id in the id argument.
   *
   * @param  {number} {id}    Id of the record to retrieve
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Record with id requested
   */
  readOne<%- nameCp -%>: function({id}, context){
    return checkAuthorization(context, '<%- namePl -%>', 'read').then( authorization =>{
      if (authorization === true) {
      return <%- nameLc -%>.findOne({where: {id: id}});
    } else {
        return new Error("You don't have authorization to perform this action");
    }
  }).catch( error =>{
      return error;
  })
  },

  /**
   * add<%- nameCp -%> - Check user authorization and creates a new record with data specified in the input argument
   *
   * @param  {object} input   Info of each field to create the new record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         New record created
   */
  add<%- nameCp -%>: function(input, context){
    return checkAuthorization(context, '<%- namePl -%>', 'create').then( authorization =>{
      if (authorization === true) {
      return <%- nameLc -%>.create(input)
      .then( <%- nameLc -%> =>{
        <%associations_temp = associations.implicit_associations["hasMany"].concat(associations.implicit_associations["belongsToMany"])-%>
        <%for(let i=0; i < associations_temp.length; i++){-%>
            if(input.add<%=associations_temp[i].target_cp_pl-%>){<%- nameLc -%>.set<%=associations_temp[i].target_cp_pl-%>(input.add<%=associations_temp[i].target_cp_pl-%>);}
          <%}-%>
        return <%- nameLc -%>;
      });
    } else {
        return new Error("You don't have authorization to perform this action");
    }
  }).catch( error =>{
      return error;
  })
  },

  /**
   * bulkAdd<%- nameCp -%>Xlsx - Load xlsx file of records NO STREAM
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Xlsx: function(_, context){
    return checkAuthorization(context, '<%- namePl -%>', 'create').then( authorization =>{
      if (authorization === true) {
    let xlsxObjs = fileTools.parseXlsx(context.request.files.xlsx_file.data.toString('binary'));
    return <%- nameLc -%>.bulkCreate(xlsxObjs, {validate: true});
      } else {
          return new Error("You don't have authorization to perform this action");
      }
    }).catch( error =>{
        return error;
    })
  },

  /**
   * bulkAdd<%- nameCp -%>Csv - Load csv file of records
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Csv: function(_, context){
    return checkAuthorization(context, '<%- namePl -%>', 'create').then( authorization =>{
      if (authorization === true) {
        delim = context.request.body.delim;
        cols = context.request.body.cols;
        tmpFile = path.join(__dirname, uuidv4()+'.csv')
        return context.request.files.csv_file.mv(tmpFile).then(() => {
          return fileTools.parseCsvStream(tmpFile, <%- nameLc -%>, delim, cols)
        }).catch((err) => {
          return new Error(err);
        }).then(() => {
          fs.unlinkSync(tmpFile)
        })
      } else {
          return new Error("You don't have authorization to perform this action");
      }
    }).catch( error =>{
        return error;
    })
  },

  /**
   * delete<%- nameCp -%> - Check user authorization and delete a record with the specified id in the id argument.
   *
   * @param  {number} {id}    Id of the record to delete
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {string}         Message indicating if deletion was successfull.
   */
  delete<%- nameCp -%>: function({id}, context){
    return checkAuthorization(context, '<%- namePl -%>', 'delete').then( authorization =>{
      if (authorization === true) {
      return <%- nameLc -%>
        .findById(id)
        .then( <%- nameLc -%> =>{
          return <%- nameLc -%>
            .destroy()
            .then(()=>{return 'Item succesfully deleted';});
          });
        } else {
            return new Error("You don't have authorization to perform this action");
        }
      }).catch( error =>{
          return error;
      })
  },

  /**
   * update<%- nameCp-%> - Check user authorization and update the record specified in the input argument
   *
   * @param  {object} input   record to update and new info to update
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Updated record
   */
  update<%- nameCp-%>: function(input, context){
    return checkAuthorization(context, '<%- namePl -%>', 'update').then( authorization =>{
      if (authorization === true) {
      return <%- nameLc -%>
        .findById(input.id)
        .then( <%- nameLc -%> => {
          <%associations_temp = associations.implicit_associations["hasMany"].concat(associations.implicit_associations["belongsToMany"])-%>
          <%for(let i=0; i < associations_temp.length; i++){-%>
              if(input.add<%=associations_temp[i].target_cp_pl-%>){<%- nameLc -%>.add<%=associations_temp[i].target_cp_pl-%>(input.add<%=associations_temp[i].target_cp_pl-%>);}
              if(input.remove<%=associations_temp[i].target_cp_pl-%>){<%- nameLc -%>.remove<%=associations_temp[i].target_cp_pl-%>(input.remove<%=associations_temp[i].target_cp_pl-%>);}
            <%}-%>
            return <%- nameLc -%>.update(input);
          });
        } else {
            return new Error("You don't have authorization to perform this action");
        }
      }).catch( error =>{
          return error;
      })
  },

  /**
   * count<%-namePlCp-%> - Count number of records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} Search argument for filtering records
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {number}          Number of records that holds the conditions specified in the search argument
   */
  count<%-namePlCp-%>: function({search}, context){
    return checkAuthorization(context, '<%- namePl -%>', 'read').then( authorization =>{
        if (authorization === true) {
          let options = {};
          if(search!== undefined){
            let arg = new searchArg(search);
            let arg_sequelize = arg.toSequelize();
            options['where'] = arg_sequelize;
          }

          return <%- nameLc -%>.count(options);
        } else {
            return new Error("You don't have authorization to perform this action");
        }
      }).catch( error =>{
          return error;
      })
  },

  /**
   * vueTable<%- nameCp-%> - Return table of records as needed for displaying a vuejs table
   *
   * @param  {string} _       First parameter is not used
   * @param  {type} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Records with format as needed for displaying a vuejs table
   */
  vueTable<%- nameCp-%>: function(_,context){
    return checkAuthorization(context, '<%- namePl -%>', 'read').then( authorization =>{
      if (authorization === true) {
      return helper.vueTable(context.request, <%- nameLc -%>, <%-  JSON.stringify(arrayAttributeString) -%>  );
    } else {
        return new Error("You don't have authorization to perform this action");
    }
  }).catch( error =>{
      return error;
  })
  }
}
