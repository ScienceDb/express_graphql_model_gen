/*
    Resolvers for basic CRUD operations
*/

const <%-  nameLc  -%> = require('../models/index').<%- nameLc -%>;
const searchArg = require('../utils/search-argument');
const fileTools =  require('../utils/file-tools');
var checkAuthorization = require('../utils/check-authorization');
<%for(let type in associations.explicit_resolvers){-%>
  <%for(let i=0; i < associations.explicit_resolvers[type].length; i++){-%>
    const <%=associations.explicit_resolvers[type][i].target.toLowerCase()-%> = require('./<%=associations.explicit_resolvers[type][i].target.toLowerCase()-%>');
  <%}-%>
<%}-%>

<% let associations_temp = associations.implicit_associations["hasMany"].concat(associations.implicit_associations["belongsToMany"])-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].target_pl.toLowerCase()%>Filter = function({input}, context){
    if(input === undefined)
    {
      return this.get<%- associations_temp[i].target_pl%>({ include: [{all: true}] });
    }else{
      let arg = new searchArg(input);
      let arg_sequelize = arg.toSequelize();
      return this.get<%- associations_temp[i].target_pl%>({where: arg_sequelize, include: [{all: true}] });
    }
  }
<%}-%>
<% associations_temp = associations.explicit_resolvers["belongsTo"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].target.toLowerCase()%> = function(_, context){
    return <%=associations_temp[i].target.toLowerCase()%>.readOne<%=associations_temp[i].target%>({"id" : this.<%=associations_temp[i].targetKey%>}, context);
  }
<%}-%>

<% associations_temp = associations.explicit_resolvers["hasOne"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].target.toLowerCase()%> = function(_, context){
    return <%=associations_temp[i].target.toLowerCase()%>.<%=associations_temp[i].target_pl%>({"input": {"field" : <%=associations_temp[i].targetKey%>, "value":{"value":this.id }, "operator": "eq"} }, context);
  }
<%}-%>

<% associations_temp = associations.explicit_resolvers["hasMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>
  <%- nameLc -%>.prototype.<%=associations_temp[i].target_pl.toLowerCase()%>Filter = function({input}, context){
    if(input === undefined)
    {
      return <%=associations_temp[i].target.toLowerCase()%>.<%=associations_temp[i].target_pl%>({"input":{"field" : <%=associations_temp[i].targetKey%>, "value":{"value":this.id }, "operator": "eq"} }, context);
    }else{

      return <%=associations_temp[i].target.toLowerCase()%>.<%=associations_temp[i].target_pl%>({"input":input},context)
      .then( (result) => {
        return result.filter( item => { if(item.<%=associations_temp[i].targetKey%> == this.id){return true;} } );
      });
    }

  }
<%}-%>


module.exports = {

  <%- namePl -%>: function({input}, context){
    if(checkAuthorization(context,'<%- namePl -%>', 'read')==true){
        if(input === undefined){
          return <%- nameLc -%>.findAll({include: [{all: true}]});
        }else{
          let arg = new searchArg(input);
          let arg_sequelize = arg.toSequelize();
          return <%- nameLc -%>.findAll({where: arg_sequelize,include: [{all: true}]});
        }
    }else{
        return "You don't have authorization to perform this action";
      }
  },

  search<%- name -%>: function({input}, context){
    if(checkAuthorization(context, '<%- namePl -%>', 'read')==true)
    {
      let arg = new searchArg(input);
      let arg_sequelize = arg.toSequelize();
      return <%- nameLc -%>.findAll({where: arg_sequelize,include: [{all: true}]});
    }else{
        return "You don't have authorization to perform this action";
      }
  },

  readOne<%- name -%>: function({id}, context){
    if(checkAuthorization(context, '<%- namePl -%>', 'read')==true)
    {
      return <%- nameLc -%>.findOne({where: {id: id}, include:[{all: true}]});
    }else{
        return "You don't have authorization to perform this action";
      }
  },

  add<%- name -%>: function(input, context){
    if(checkAuthorization(context,'<%- namePl -%>','create')==true)
    {
      return <%- nameLc -%>.create(input)
      .then( <%- nameLc -%> =>{
        return <%- nameLc -%>;
      });
    }else{
        return "You don't have authorization to perform this action";
      }
  },

  bulkAdd<%- name -%>Xlsx: function(_, context){
    let xlsxObjs = fileTools.parseXlsx(context.request.files.xlsx_file.data.toString('binary'));
    return <%- nameLc -%>.bulkCreate(xlsxObjs, {validate: true});
  },

  bulkAdd<%- name -%>Csv: function(_, context){
    //delim = context.request.body.delim;
    //cols = context.request.body.cols;
    return fileTools.parseCsv(context.request.files.csv_file.data.toString())
    .then((csvObjs)=> {return <%- nameLc -%>.bulkCreate(csvObjs, {validate: true}); });
  },

  delete<%- name -%>: function({id}, context){
    if(checkAuthorization(context,'<%- namePl -%>','delete')==true)
    {
      return <%- nameLc -%>
        .findById(id)
        .then( <%- nameLc -%> =>{
          return <%- nameLc -%>
            .destroy()
            .then(()=>{return 'Item succesfully deleted';});
          });
    }else{
        return "You don't have authorization to perform this action";
      }
  },

  update<%- name -%>: function(input, context){
    if(checkAuthorization(context,'<%- namePl -%>','update')==true)
    {
      return <%- nameLc -%>
        .findById(input.id)
        .then( <%- nameLc -%> => {
            return <%- nameLc -%>.update(input);
          });
    }else{
        return "You don't have authorization to perform this action";
      }
  }
}
