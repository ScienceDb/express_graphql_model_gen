/*
    Resolvers for basic CRUD operations
*/

const path = require('path');
const <%-  nameLc  -%> = require(path.join(__dirname, '..', 'models_index.js')).<%- nameLc -%>;
const helper = require('../utils/helper');
const checkAuthorization = require('../utils/check-authorization');
const fs = require('fs');
const {handleError} = require('../utils/errors');
const os = require('os');

<% associations_temp = associations["belongsToMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Filter - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of associated records holding conditions specified by search, order and pagination argument
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Filter = function({search,order,pagination}, context){

    return this.<%=associations_temp[i].name%>FilterImpl({search, order, pagination});
  }
  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){
    return this.countFiltered<%=associations_temp[i].name_cp%>Impl({search});
  }
<%}-%>


<%let associations_one = associations["belongsTo"].concat( associations["hasOne"])-%>
<% for(let i=0; i < associations_one.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_one[i].name%> - Return associated record
   *
   * @param  {object} search       Search argument to match the associated record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_one[i].name%> = function({search}, context){
    return this.<%=associations_one[i].name%>Impl(search);
  }
<%}-%>

<% associations_temp = associations["hasMany"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Filter - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of associated records holding conditions specified by search, order and pagination argument
   */
  <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Filter = function({search,order,pagination}, context){
    return this.<%=associations_temp[i].name%>FilterImpl({search, order, pagination});
  }

  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){

    return this.countFiltered<%=associations_temp[i].name_cp%>Impl ({search});
  }

<%}-%>




module.exports = {

  /**
   * <%- namePl -%> - Check user authorization and return certain number, specified in pagination argument, of records that
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Offset and limit to get the records from and to respectively
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records holding conditions specified by search, order and pagination argument
   */
  <%- namePl -%>: function({search, order, pagination}, context){
    return checkAuthorization(context, '<%- name -%>', 'read').then( authorization =>{
        if (authorization === true) {
          return <%- nameLc -%>.readAll(search, order, pagination);
      } else {
          return new Error("You don't have authorization to perform this action");
      }
    }).catch( error =>{
          handleError( error);
    })
  },

  /**
   * readOne<%- nameCp -%> - Check user authorization and return one record with the specified id in the id argument.
   *
   * @param  {number} {id}    Id of the record to retrieve
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Record with id requested
   */
  readOne<%- nameCp -%>: function({id}, context){
    return checkAuthorization(context, '<%- name -%>', 'read').then( authorization =>{
      if (authorization === true) {
      return <%- nameLc -%>.readById(id);
    } else {
        return new Error("You don't have authorization to perform this action");
    }
  }).catch( error =>{
        handleError( error);
  })
  },

  /**
   * add<%- nameCp -%> - Check user authorization and creates a new record with data specified in the input argument
   *
   * @param  {object} input   Info of each field to create the new record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         New record created
   */
  add<%- nameCp -%>: function(input, context){
    return checkAuthorization(context, '<%- name -%>', 'create').then( authorization =>{
      if (authorization === true) {
          return <%- nameLc -%>.addOne(input);
    } else {
        return new Error("You don't have authorization to perform this action");
    }
  }).catch( error =>{
      handleError( error);
  })
  },

  /**
   * bulkAdd<%- nameCp -%>Csv - Load csv file of records
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Csv: function(_, context) {
    return checkAuthorization(context, '<%- name -%>', 'create').then(authorization => {
        if (authorization === true) {
          return <%- nameLc -%>.bulkAddCsv(context);
        } else {
            return new Error("You don't have authorization to perform this action");
        }
    }).catch(error => {
        return error;
    })
  },

  /**
   * delete<%- nameCp -%> - Check user authorization and delete a record with the specified id in the id argument.
   *
   * @param  {number} {id}    Id of the record to delete
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {string}         Message indicating if deletion was successfull.
   */
  delete<%- nameCp -%>: function({id}, context){
    return checkAuthorization(context, '<%- name -%>', 'delete').then( authorization =>{
      if (authorization === true) {
        return <%- nameLc -%>.deleteOne(id);
      } else {
        return new Error("You don't have authorization to perform this action");
      }
      }).catch( error =>{
          handleError( error);
      })
  },

  /**
   * update<%- nameCp-%> - Check user authorization and update the record specified in the input argument
   *
   * @param  {object} input   record to update and new info to update
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Updated record
   */
  update<%- nameCp-%>: function(input, context){
    return checkAuthorization(context, '<%- name -%>', 'update').then( authorization =>{
      if (authorization === true) {
          return <%- nameLc -%>.updateOne(input);
        } else {
            return new Error("You don't have authorization to perform this action");
        }
      }).catch( error =>{
            handleError( error);
      })
  },

  /**
   * count<%-namePlCp-%> - Counts number of records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} Search argument for filtering records
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {number}          Number of records that holds the conditions specified in the search argument
   */
  count<%-namePlCp-%>: function({search}, context){
    return checkAuthorization(context, '<%- name -%>', 'read').then( authorization =>{
        if (authorization === true) {
          return <%- nameLc -%>.countRecords(search);
        } else {
            return new Error("You don't have authorization to perform this action");
        }
      }).catch( error =>{
            handleError( error);
      })
  },

  /**
   * vueTable<%- nameCp-%> - Return table of records as needed for displaying a vuejs table
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Records with format as needed for displaying a vuejs table
   */
  vueTable<%- nameCp-%>: function(_,context){
    return checkAuthorization(context, '<%- name -%>', 'read').then( authorization =>{
      if (authorization === true) {
      return helper.vueTable(context.request, <%- nameLc -%>, <%-  JSON.stringify(arrayAttributeString) -%>  );
    } else {
        return new Error("You don't have authorization to perform this action");
    }
  }).catch( error =>{
        handleError( error);
  })
},

  /**
   * csvTableTemplate<%- nameCp-%> - Returns table's template
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {Array}         Strings, one for header and one columns types
   */
  csvTableTemplate<%- nameCp-%>: function(_, context){
    return checkAuthorization(context, '<%- name -%>', 'read').then(authorization => {
        if (authorization === true) {
            return <%- nameLc -%>.csvTableTemplate();
        } else {
            return new Error("You don't have authorization to perform this action");
        }
    }).catch(error => {
        handleError(error);
    })
  }

}
