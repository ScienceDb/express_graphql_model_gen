<%# bulkAssociations functions for model-layer; paramater: op (add or remove)_%> 
<%for(let i=0; i < associationsArguments["to_one"].length; i++){_%>
  /**
   * bulk<% if(op === 'remove'){ %>Dis<% } %>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%> - bulk<% if(op === 'remove'){ %>Dis<% } %>Associaton of given ids
   *
   * @param  {array} bulkAssociationInput Array of associations to <%- op %>
   * @param  {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
   * @return {string} returns message on success
   */
  <% if (associationsArguments["to_one"][i].holdsForeignKey) { _%>
    <% if(storageType === 'sql' || storageType === 'sql-adapter'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>(bulkAssociationInput){
        let mappedForeignKeys = helper.mapForeignKeystoPrimaryKeyArray(bulkAssociationInput, "<%-idAttribute%>", "<%-associationsArguments["to_one"][i].targetKey%>");
        var promises = [];
        mappedForeignKeys.forEach(({<%-associationsArguments["to_one"][i].targetKey%>, <%- idAttribute-%>}) => {
            promises.push(super.update({
                accessionId: <% if (op == 'remove') { -%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>
                }, {
                where: {    
                  <%- idAttribute-%>: <%- idAttribute-%><% if (op == 'remove') { -%>,<%-associationsArguments["to_one"][i].targetKey-%>: <%-associationsArguments["to_one"][i].targetKey-%> <%}-%>
                }
            }));
        })
        await Promise.all(promises);
        return "Records successfully updated"
      }
    <%}_%>
    <% if(storageType === 'distributed-data-model'){-%>
      static async bulk<% if(op === 'remove'){_%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>(bulkAssociationInput, benignErrorReporter){
        let mappedBulkAssociateInputToAdapters = this.mapBulkAssociationInputToAdapters(bulkAssociationInput);
        var promises = [];
        Object.keys(mappedBulkAssociateInputToAdapters).forEach(responsibleAdapter => {
            promises.push(adapters[responsibleAdapter].bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>(mappedBulkAssociateInputToAdapters[responsibleAdapter], benignErrorReporter))
        });
        await Promise.all(promises);
        return "Records successfully associated!";
      }
    <%}_%>
    <% if(storageType === 'zendro-webservice-adapter' || storageType === 'ddm-adapter' || storageType === 'zendro-webservice'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>(bulkAssociationInput, benignErrorReporter){
        let query = `mutation  bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>($bulkAssociationInput: [bulkAssociate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>Input]){
          bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>(bulkAssociationInput: $bulkAssociationInput, skipAssociationsExistenceChecks: true) 
        }`
        try {
            // Send an HTTP request to the remote server
            let response = await axios.post(remoteCenzontleURL, {
                query: query,
                variables: {bulkAssociationInput: bulkAssociationInput}
            });
            //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
            if (helper.isNonEmptyArray(response.data.errors)) {
                benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteCenzontleURL));
            }
            // STATUS-CODE is 200
            // NO ERROR as such has been detected by the server (Express)
            // check if data was send

            if (response && response.data && response.data.data) {
                return response.data.data. bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>;
            } else {
                throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
            }
        } catch (error) {
            //handle caught errors
            errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteCenzontleURL);
        }
    }
    <%}_%>
    <% if(storageType === 'generic'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>(bulkAssociationInput, benignErrorReporter){
        /*
        YOUR CODE GOES HERE
        */
        throw new Error('bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].target_cp-%>() is not implemented for model <%- name -%>');
      }
    <%}_%>
  <%}_%>
<%}_%>