<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
  <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
  /**
  * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (adapter-layer) for to_one associationsArguments to <%- op %>
  *
  * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
  * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated.
  */

    <%#
    /**
      *check the type of adapter and handle cenzontle-webservice-adapter and ddm-adapter
      */
    -%>
    <% if(storageType === 'cenzontle-webservice-adapter' || storageType === 'ddm-adapter'){-%>
      static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>) {
        let query = `
              mutation
                update<%- nameCp-%>{
                  update<%- nameCp-%>(
                    <%- idAttribute -%>:"${<%- idAttribute -%>}"
                    <%- op %><%= associationsArguments["to_one"][i].name_cp%>:"${<%-associationsArguments["to_one"][i].targetKey-%>}"
                    skipAssociationsExistenceChecks: true
                  ){
                    <%- idAttribute -%>
                    <%-associationsArguments["to_one"][i].targetKey-%>
                  }
                }`

        return axios.post(remoteCenzontleURL, {query:query}).then(res => {
          //check
          if(res&&res.data&&res.data.data) {
            return res.data.data.update<%- nameCp -%>;
          } else {
            throw new Error(`Invalid response from remote cenz-server: ${remoteCenzontleURL}`);
          }
        }).catch(error =>{
          error['url'] = remoteCenzontleURL;
          handleError(error);
        });
      }
  <%}-%>
  <%#  /** End of the cenzontle-webservice-adapter case and the ddm-adapter case */ -%>


  <%#
  /**
    *check the type of adapter and handle sql-adapter
    */
  -%>
  <%if(storageType === 'sql-adapter'){-%>
  static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>) {
      let updated = await sequelize.transaction(async transaction => {
        try {
          return super.update({ <%-associationsArguments["to_one"][i].targetKey-%>:  <% if (op == 'remove') { %>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>},{where: {<%- idAttribute -%>: <%- idAttribute -%><% if (op == 'remove') { -%>,<%-associationsArguments["to_one"][i].targetKey-%>: <%-associationsArguments["to_one"][i].targetKey-%> <%}-%>}}, {transaction: transaction})
        } catch (error) {
            throw error;
        }
      });
      return updated;
   }
  <%}-%>
  <%#  /*** End of the the sql-adapter case */ -%>

 <%}-%>
<%} -%>
