<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
  <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
    /**
    * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
    *
    * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
    * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
    */
    static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>) {
      const mutationCql = `UPDATE <%- namePl -%> SET <%-associationsArguments["to_one"][i].targetKey-%> = ? WHERE <%- idAttribute -%> = ${<%- idAttribute -%>}`;
      await this.storageHandler.execute(mutationCql, [<% if (op == 'remove') { -%>null<% } else { %>`${<%-associationsArguments["to_one"][i].targetKey-%>}`<%}-%>], {prepare: true});
      const checkCql = `SELECT * FROM <%- namePl -%> WHERE <%- idAttribute-%> = ${<%- idAttribute-%>}`;
      let result = await this.storageHandler.execute(checkCql);
      return new <%- name -%>(result.first());
    }
  <%} -%>
<%}-%>