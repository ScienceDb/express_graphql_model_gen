<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
<<<<<<< HEAD
  /**
  * _<%- op %><%-associationsArguments["to_one"][i].name_cp-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
  *
  * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
  * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
  */
  static async _<%- op -%><%-associationsArguments["to_one"][i].name_cp-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>) {
    let updated = await sequelize.transaction(async transaction => {
      try {
        return <%- nameCp -%> .update({ <%-associationsArguments["to_one"][i].targetKey-%>:  <% if (op == 'remove') { %>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>},{where: {<%- idAttribute -%>: <%- idAttribute -%>}}, {transaction: transaction})
=======
  static async _<%- op -%><%-associationsArguments["to_one"][i].name_cp-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>) {
    let updated = await sequelize.transaction(async transaction => {
      try {
        return <%- nameCp -%> .update({ <%-associationsArguments["to_one"][i].targetKey-%>:  <%-associationsArguments["to_one"][i].targetKey-%>},{where: {<%- idAttribute -%>: <%- idAttribute -%>}}, {transaction: transaction})
>>>>>>> issue107-refactoring
      } catch (error) {
          throw error;
      }
    });
    return updated;
  }
<%}-%>