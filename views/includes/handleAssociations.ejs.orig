<%# handleAssociations() template include%> 
/**
* handleAssociations - handles the given associationsArguments in the create and update case.
*
* @param {object} input   Info of each field to create the new record
* @param {object} context Provided to every resolver holds contextual information like the resquest query and user info.
*/
<%- nameLc -%>.prototype.handleAssociations = async function(input, context){
  try {
    let promises = [];
<<<<<<< HEAD
    <% ['add','remove'].forEach(op => { -%>
      <% to_manyAssociations = associationsArguments["to_many"].concat(associationsArguments["to_many_through_sql_cross_table"])-%>
      <%for(let i=0; i < to_manyAssociations.length; i++){-%>
        if (helper.isNonEmptyArray(input.<%-op%><%=to_manyAssociations[i].name_cp-%>)) {
          promises.push(this.<%-op%><%=to_manyAssociations[i].name_cp-%>(input, context));
        }<%}-%>    
      <%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
        if (helper.isNotUndefinedAndNotNull(input.<%-op%><%=associationsArguments["to_one"][i].name_cp-%>)) {
          promises.push(this.<%-op%><%=associationsArguments["to_one"][i].name_cp-%>(input, context));
        }
      <%}-%>
    <%}) -%>  
=======

    <%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
      if (helper.isNonEmptyArray(input.add<%=associationsArguments["to_many"][i].name_cp-%>)) {
        promises.push(this.add<%=associationsArguments["to_many"][i].name_cp-%>(input, context));
      }
    <%}-%>

    <%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
      if (helper.isNotUndefinedAndNotNull(input.add<%=associationsArguments["to_one"][i].name_cp-%>)) {
        promises.push(this.add<%=associationsArguments["to_one"][i].name_cp-%>(input, context));
      }
    <%}-%>

>>>>>>> issue107-refactoring
    await Promise.all(promises);
  } catch (error) {
      throw error
  }
}