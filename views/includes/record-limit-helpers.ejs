/**
* errorMessageForRecordsLimit(query) - returns error message in case the record limit is exceeded.
*
* @param {string} query The query that failed
*/
function errorMessageForRecordsLimit(query) {
  return "Max record limit of " + globals.LIMIT_RECORDS + " exceeded in " + query;
}

/**
* checkCount(search, context, query) - Make sure that the current set of requested records does not exceed the record limit set in globals.js.
*
* @param {object} search  Search argument for filtering records
* @param {object} context Provided to every resolver holds contextual information like the resquest query and user info.
* @param {string} query The query that makes this check
*/
async function checkCount(search, context, query) {
  if (await <%- nameLc -%>.countRecords(search) > context.recordsLimit) {
      throw new Error(errorMessageForRecordsLimit(query));
  }
}

/**
* checkCountForOne(context) - Make sure that the record limit is not exhausted before requesting a single record
*
* @param {object} context Provided to every resolver holds contextual information like the resquest query and user info.
*/
function checkCountForOne(context) {
  if (1 > context.recordsLimit) {
      throw new Error(errorMessageForRecordsLimit("readOne<%- nameCp -%>"));
  }
}

/**
* checkCountAgainAndAdaptLimit(context, numberOfFoundItems, query) - Make sure that the current set of requested records does not exceed the record limit set in globals.js.
*
* @param {object} context Provided to every resolver holds contextual information like the resquest query and user info.
* @param {number} numberOfFoundItems number of items that were found, to be subtracted from the current record limit
* @param {string} query The query that makes this check
*/
function checkCountAgainAndAdaptLimit(context, numberOfFoundItems, query) {
  if (numberOfFoundItems > context.recordsLimit) {
      throw new Error(errorMessageForRecordsLimit(query));
  }
  context.recordsLimit -= numberOfFoundItems;
}