<%# Helper functions for checking the Record Limits %> 

/**
* checkCountAndReduceRecordsLimit(search, context, query) - Make sure that the current set of requested records does not exceed the record limit set in globals.js.
*
* @param {object} search  Search argument for filtering records
* @param {object} context Provided to every resolver holds contextual information like the resquest query and user info.
* @param {string} resolverName The resolver that makes this check
* @param {string} modelName The model to do the count
*/
async function checkCountAndReduceRecordsLimit(search, context, resolverName, modelName = '<%- nameLc -%>') {
  let count = (await models[modelName].countRecords(search));
  helper.checkCountAndReduceRecordLimitHelper(count, context, resolverName)
}

/**
* checkCountForOneAndReduceRecordsLimit(context) - Make sure that the record limit is not exhausted before requesting a single record
*
* @param {object} context Provided to every resolver holds contextual information like the resquest query and user info.
*/
function checkCountForOneAndReduceRecordsLimit(context) {
  helper.checkCountAndReduceRecordLimitHelper(1, context, "readOne<%- nameCp -%>")
}